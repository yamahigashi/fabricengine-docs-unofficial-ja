#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:4
msgid "KL Function Editor"
msgstr "KL Function エディタ"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:6
msgid ""
"Within Canvas you can directly create custom KL function nodes. These "
"nodes run through the same just-in-time compilation process utilizing "
"LLVM as do graphs."
msgstr ""
"Canvas 内に独自のKL関数ノードを作成できます。これらのノードは LLVMを使用した、グラフに対する just-in-time "
"（JIT）コンパイルと同じ処理過程を経て実行されます。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:8
msgid ""
"To create custom KL functions, right click the empty space in a graph "
"view and choose :dfn:`New empty function`. This will create the function "
"node and open the KL function editor. To open the KL function editor in "
"an existing function node, double shift-click the node or open the "
"context menu by right-clicking the node and choose :dfn:`Edit`."
msgstr ""
"カスタムKL関数の作成には、グラフビューの背景を右クリックし、 :dfn:`New empty function` "
"を選びます。すると関数ノードがつくられ、KL関数エディタが開きます。既存の関数ノードをKL関数エディタで開くには、シフトキーを押下しながらダブルクリックするか、そのノードを右クリックしコンテキストメニューより"
" :dfn:`Edit` を選びます。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:12
msgid ""
"The KL function editor essentially contains two sections: The port list "
"and the code window."
msgstr "KL function エディタは２つの基礎要素 ―portリストと、codeウィンド から成ります。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:15
msgid "KL function ports"
msgstr "KL関数ポート"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:17
msgid ""
"You can add ports by providing their name, port type, and data type, and "
"clicking \"Add Port\". By default port types are polymorphic, but you can"
" pick fixed types. If you want to know more about KL function "
"polymorphism, please see :ref:`canvas-programmer-guide-polymorphism`."
msgstr ""
"ポートの名前、ポートの型、データの型を埋め、 \"Add Port\" "
"をクリックすることでポートの追加ができます。既定ではポートの型は多態ですが、固定の型を選ぶこともできます。KL関数の多態性については :ref"
":`canvas-programmer-guide-polymorphism` を参照してください。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:19
msgid ""
"To remove a port, click the red minus icon to the left of the port.  You "
"can also select multiple ports using shift-click and control-click "
"(command-click on macOS), right clicking and selecting \"Remove "
"Selected\"."
msgstr ""
"ポートの削除には、ポート左の赤いマイナスアイコンをクリックします。シフトクリックやコントロールクリック（macOSであればコマンドクリック）をすることで複数のポートを選択し、右クリックから"
" \"Remove Selected\" することもできます。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:21
msgid ""
"You can edit the details of a port, such as UI metadata, by clicking the "
"edit (\"pencil\") icon to the left of the port."
msgstr "ポートの詳細を編集することもできます。たとえばUIメタデータです。ポート左の鉛筆アイコンをクリックします。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:23
msgid ""
"You can reorder ports using drag-and-drop.  This also works for selected "
"ranges of ports using shift/control-click."
msgstr "ドラッグ・アンド・ドロップによりポートを再配置することができます。シフト／コントロールクリックによる範囲選択に対しても機能します。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:25
msgid "Ports can be referenced by name in the KL code below."
msgstr "ポートはKLコード内より、そのポート名で参照できます。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:27
msgid ""
"If you add a port with a data type which is implemented in a KL extension"
" you have to add that extension to the :dfn:`Required Extensions` field "
"on the top right."
msgstr ""
"KLエクステンションに実装された型を使用するポートを追加する際は、そのエクステンションをエディタウィンド左上 :dfn:`Required "
"Extensions` 欄に記入します。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:30
msgid "Requirements field"
msgstr "Requirementsフィールド"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:31
msgid ""
"If a KL function node depends on an extension on disk, you will need to "
"put the extension requirement definition into the requirements text "
"field. For more information, please see :ref:`canvas-user-guide-"
"graphview-requirements`."
msgstr ""
"KL関数ノードがディスク上のなんらかのエクステンションに依存する場合、エクステンションの requirement定義を requirements "
"テキストフィールドに記述します。詳細は :ref:`canvas-user-guide-graphview-requirements` 参照。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:34
msgid "KL code window"
msgstr "KL code ウィンド"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:36
msgid ""
"The main entry point for the KL function node is the dfgEntry block. The "
"Canvas compiler will replace the dfgEntry with the appropriate function "
"declaration, containing all of the ports and features. Defining three "
":dfn:`Float32` ports as in image above, you can define an entry point "
"like this:"
msgstr ""
"KL関数ノードのエントリポイントは dfgEntry ブロックになります。Canvasコンパイラは dfgEntry を適切な関数宣言 "
"―つまり必要なポートや機能の定義― に置き換えます。以下の例では３つの :dfn:`Float32` "
"ポートがあり、エントリポイントの定義はこのようになります。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:46
msgid ""
"Of course you can also implement operators directly within the KL "
"function editor. So given you have two ports of type :dfn:`Float32[]`, "
"for example, you can implement a task using PEX like this:"
msgstr ""
"もちろん、KL関数エディタ内ではオペレータを直接定義できます。例えば２つの :dfn:`Float32[]` "
"ポートをもつ、PEX（並列実行）オペレータ使用例は："

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:59
msgid ""
"To compile the KL function click on the :dfn:`Save` button on the top "
"left. You can also reload the KL code for KL functions referencing an "
"external preset file using the :dfn:`Reload` button. When leaving the KL "
"function editor the UI will warn you in case you have unsaved changes."
msgstr ""
"ウィンド左上の :dfn:`Save` を押しKL関数をコンパイルします。 :dfn:`Reload` "
"ボタンを押すと、KL関数で使用する外部プリセットファイル中のKLコードを読み込み直します。KL関数エディタから抜ける際、未保存の変更がある場合には警告UIが表示されます。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:61
msgid ""
"The code window also offers basic code completion of objects and methods."
" Typing Ctrl-spacebar brings up the code completion menu (i.e: If you're "
"on a new line and type \"V\" it will bring up a list with objects that "
"start with \"V\" like Vec2, Vec3, etc). The code completion will also "
"list the methods of an object and their signature."
msgstr ""
"このコードウィンドではオブジェクト、メソッドの基本的なコード補完を提供しています。Ctrl-スペース "
"をタイプすると、コード補完メニューが表示されます。（例：新規行で『V』と書き始めると、『V』で始まるオブジェクト、Vec2, "
"Vec3,などがリストアップされます）オブジェクトのメソッドやシグネチャもコード補完対象となります。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:63
msgid "For more information on KL's features, please see the :ref:`KLPG`."
msgstr "より詳しい KL の機能については :ref:`KLPG` を参照してください。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:65
msgid ""
"Even though it's possible to define data types within a KL function node,"
" we highly recommend to implement KL types in a KL extension instead. "
"This makes it much easier to track changes within the type for the Canvas"
" compiler. You can ensure that the KL function loads the extension by "
"adding the extension to the :dfn:`Required extensions` text field on the "
"top left of the window."
msgstr ""
"KL関数ノード内であらたにデータ型を定義することも可能です。ただしデータ型の実装はKLエクステンション内で行うことを強くお薦めします。Canvasコンパイラより変更を追跡させやすくするためです。エディタウィンド左上の"
"  :dfn:`Required extensions` "
"欄に使用するKLエクステンションを追記し、KL関数がそのエクステンションを確実に読み込むようにします。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:68
msgid "Special Constructs in Canvas KL Code"
msgstr "Canvas KLコード内の特別な構成物"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:70
msgid ""
"There are several constructs that are specific to KL code that is used "
"within Canvas.  They are:"
msgstr "Canvas内で使われる、特定の KLコード構成物がいくつかあります。以下："

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:73
msgid "``dfgEntry``"
msgstr ""

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:73
msgid "Entry point for the Canvas node, as explained above."
msgstr "Canvasノードのエントリポイントです。上述のとおりです。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:76
msgid "``dfgExecute(portName)``"
msgstr ""

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:76
msgid ""
"Force the execution of an explicit execute port; see :ref:`canvas-"
"programmer-guide-execute-ports-explicit` for more information."
msgstr ""
"明示的なexecuteポートの実行を強制します。詳細は :ref:`canvas-programmer-guide-execute-ports-"
"explicit` を参照してください。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:79
msgid "``dfgNodePath``"
msgstr ""

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:79
msgid "A string constant representing the path to the node being executed."
msgstr "文字列定数で、ノードが実行されるパスを表します。"

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:83
msgid "``dfgPullBlockPort``"
msgstr ""

#: ../../source/CanvasProgrammerGuide/klfunctioneditor.rst:82
#, fuzzy
msgid ""
"Pull a block port. For more information, see :ref:`the blocks section of "
"the Canvas Programming Guide <canvas-programming-guide-blocks>`"
msgstr ""
"blockポートをpullします。 :ref:`Blocks - 関数ノードでの Block の公開 <canvas-programmer-"
"guide-blocks>` 参照。"

#~ msgid ""
#~ msgstr "KL関数エディタ内でのポートの並び順変更は未対応です。将来のバージョンにより対応される予定です。"

