# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2016 Fabric Software Inc
# This file is distributed under the same license as the Fabric Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/PythonGuide/index.rst:4
msgid "Python Programming Guide"
msgstr ""

#: ../../source/PythonGuide/index.rst:10
msgid "|FABRIC_PRODUCT_NAME| version |FABRIC_VERSION|"
msgstr ""

#: ../../source/PythonGuide/index.rst:11
msgid "|FABRIC_COPYRIGHT|"
msgstr ""

#: ../../source/PythonGuide/index.rst
msgid "Table of Contents"
msgstr ""

#: ../../source/PythonGuide/index.rst:17
msgid "Introduction"
msgstr ""

#: ../../source/PythonGuide/index.rst:19
msgid ""
"Fabric has offered Python bindings for the Core C++ API for some time but"
" new to version 2.2.0 is a PySide-compatible wrapping of the FabricUI "
"user-interface library, allowing users to build complete standalone "
"Fabric-based tools in Python. There is also a higher-level Canvas Python "
"module which wraps much of the FabricUI functionality and makes it "
"accessible in a way that's easier for building custom Python "
"applications."
msgstr ""

#: ../../source/PythonGuide/index.rst:21
msgid ""
"The Canvas standalone has been rebuilt in Python using the Canvas module "
"and provides a good example of how another standalone application may be "
"built using Python. The Canvas standalone can be found in "
"`FABRIC_DIR/bin/canvas.py`."
msgstr ""

#: ../../source/PythonGuide/index.rst:23
msgid ""
"Additionally, a sample Alembic Viewer application is also shipped with "
"each release and is located "
"`FABRIC_DIR/Samples/Python/AlembicViewer/alembic_viewer.py`. A short "
"tutorial has been written outlining the steps taken to create the Alembic"
" Viewer sample application. See the :ref:`ALEMBICVIEWERTUTORIAL` for more"
" information."
msgstr ""

#: ../../source/PythonGuide/index.rst:25
msgid ""
"The Canvas module and the FabricUI Python bindings are still a work in "
"progress. Over the next few releases we will be working on cleaning up "
"and stabilizing the API as well as providing more detailed documentation."
" In the meantime we welcome users to begin experimenting with it to build"
" applications, though the API may be changing from release to release as "
"we make improvements to both functionality and ease of use."
msgstr ""

#: ../../source/PythonGuide/index.rst:27
msgid ""
"Currently we are only providing the bindings for Python 2.7 with Qt 4.8.x"
" and PySide 1.2.4. Users can however visit the `FabricUI repository "
"<http://github.com/fabric-engine/FabricUI>`_ to check out and build the "
"bindings against any version of Python or Qt that's required. In a future"
" release we will also add FabricUI Python support for supported DCCs."
msgstr ""

#: ../../source/PythonGuide/index.rst:30
msgid "Canvas Module"
msgstr ""

#: ../../source/PythonGuide/index.rst:32
msgid ""
"Here you can find documentation on the main Canvas module classes and "
"their most relevant methods. Not all classes are documented here and you "
"may still want to look at the Python code itself which can be found under"
" `FABRIC_DIR/Python/2.7/FabricEngine/Canvas`, however this should give "
"you enough of a starting point to begin building your own Python "
"applications."
msgstr ""

#: ../../source/PythonGuide/index.rst:35
msgid "CanvasWindow"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow:1 of
msgid ""
"This module adds the CanvasWindow which encompasses most of the UI "
"required to build a Python application. Users building their own custom "
"apps may want to subclass the CanvasWindow and simply override relevant "
"methods to change behavior as needed."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow:1 of
msgid "This window encompasses the entire Canvas application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow:6 of
msgid "Attributes:"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow:4 of
msgid ""
"defaultFrameIn (int): Default in frame. defaultFrameOut (int): Default "
"out frame. autosaveIntervalSecs (int): Interval at which to autosave the "
"current graph."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow:13
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initKL:8
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:15
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._statusCallback:5
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.closeEvent:7
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.execNewGraph:5
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.loadGraph:5
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFrameChanged:6
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onNewGraph:7
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onPortManipulationRequested:4
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.performSave:4
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.saveGraph:7
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.setBlockCompilations:3
#: FabricEngine.Canvas.FabricParser.CheckExtension:3 of
msgid "Arguments:"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow:9 of
msgid ""
"settings (QtCore.QSettings): Settings object that is used to store and "
"retrieve settings for the application. unguarded (bool): Whether to "
"create the Fabric client in unguarded mode. noopt (bool): Whether to "
"create the Fabric client in unoptimized mode."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._init:1 of
msgid "Initializes the settings and config for the application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._init:3 of
msgid "The autosave directory and file name are established here."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDFG:1 of
msgid "Initializes the Data Flow Graph."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDFG:3 of
msgid ""
"An evalContext is created to provide contextual information about the "
"evaluation to operators and other objects and systems with Fabric Engine."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDFG:7 of
msgid ""
"A binding to a graph is initialized and is setup so the application can "
"interact with it via the DFGWidget and through other scripted methods "
"within the application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDFG:11 of
msgid "The UICmdHandler handles the interaction between the UI and the client."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDFG:13 of
msgid ""
"The DFGWidget is the UI that reflects the binding to the graph that is "
"created and changed through the application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDocks:1 of
msgid "Initializes all of dock widgets for the application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initDocks:3 of
msgid ""
"The dock widgets host the main widgets for the application and are able "
"to be toggled on and off via the menu items that are created. Some "
"widgets that are hosted in dock widgets are instanced here and some have "
"already been created such as the DFGWidget and TimeLineWidget."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initGL:1 of
msgid "Initializes the Open GL viewport widget."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initKL:1 of
msgid "Initializes the Fabric client."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initKL:3 of
msgid ""
"The core client is what drives the application and what the user "
"interface interacts with to create data types and process the data. The "
"client is required in all Fabric based applications."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initKL:8 of
msgid ""
"unguarded (bool): Sets the client to run in guarded mode or not. noopt "
"(bool): Set the client to skip KL code optimization"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initLog:1 of
msgid "Initializes the DFGLogWidget and Undo view."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initMenus:1 of
msgid "Initializes all menus for the application."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initTimeLine:1 of
msgid "Initializes the TimeLineWidget."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initTimeLine:3 of
msgid ""
"The timeline widget is setup with the class variables for the default in "
"and out frames."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initTimeLine:6 of
msgid ""
"The frameChanged signal is connected to the onFrameChanged method along "
"with the Value Editor's onFrameChanged method too."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initTreeView:1 of
msgid "Initializes the preset TreeView."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initTreeView:3 of
msgid "Also connects the DFG Controller's dirty signal to the onDirty method."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initValueEditor:1 of
msgid "Initializes the value editor."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._initWindow:1 of
msgid ""
"Initializes the window attributes, window widgets, actions, and the fps "
"timer."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:1 of
msgid "Callback method that fires when the client sends output."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:5 of
msgid "Report sources:"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:4 of
msgid "Core.ReportSource.System Core.ReportSource.User"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:11 of
msgid "Report levels:"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:8 of
msgid ""
"Core.ReportLevel.Error Core.ReportLevel.Warning Core.ReportLevel.Info "
"Core.ReportLevel.Debug"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._reportCallback:14 of
msgid ""
"source (int): Source of the report call. level (int): Level of the "
"report. line (int): Text of the output."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._statusCallback:1 of
msgid ""
"Status callback used for KL code to communicate status messages back to "
"the client."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow._statusCallback:5 of
msgid "target (str): Target of the callback. data: Data to be sent to the target."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.autosave:1 of
msgid "Saves the scene when the auto-save timer triggers."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.checkUnsavedChanges:1 of
msgid "Checks for any unsaved changes in the graph."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.checkUnsavedChanges:3 of
msgid ""
"If there are changes that haven't been saved the user is prompted with a "
"dialog asking them if the graph should be saved."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.closeEvent:1 of
msgid "Standard close event method called when the Window is closed."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.closeEvent:3 of
msgid ""
"Settings for the application are stored and the window widget is closed. "
"The super class's closeEvent is then fired and the Fabric client is "
"closed."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.closeEvent:8 of
msgid "event (QtCore.QEvent): Event that has been triggered."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.enableShortCutsAndUndoRedo:1
#: of
msgid "Enables or disables shortcuts."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.enableShortCutsAndUndoRedo:3
#: of
msgid "enabled (bool): Whether or not to enable the shortcuts."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.execNewGraph:1 of
msgid "Callback Executed when a key or menu command has requested a new graph."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.execNewGraph:3 of
msgid "This simply executes the corresponding script command."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.execNewGraph:6
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onNewGraph:8 of
msgid "skip_save (bool): Whether to skip the check for unsaved changes."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.loadGraph:1 of
msgid "Method to load a graph from disk."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.loadGraph:3 of
msgid "Files are typically *.canvas files."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.loadGraph:6 of
msgid "filePath (str): Path to the graph to load."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onAdditionalMenuActionsRequested:1
#: of
msgid "Callback for when a request to add additional menu actions is called."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onAdditionalMenuActionsRequested:5
#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onGraphSet:3 of
msgid "Args:"
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onAdditionalMenuActionsRequested:4
#: of
msgid ""
"name (str): Name of the menu. menu (QMenu): Menu item to add to. prefix "
"(str): Whether to add the prefixed menu items or not."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onDirty:1 of
msgid "Method called when the graph is dirtied."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFileNameChanged:1 of
msgid "Callback for when the file name has changed."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFileNameChanged:3 of
msgid "This method updates the window title to reflect the new file path."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFrameChanged:1 of
msgid "Method called when the user has changed frames."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFrameChanged:3 of
msgid ""
"The frame change call pushes the new frame into the binding ports which "
"map to the timeline."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onFrameChanged:7 of
msgid "frame (float): The new frame the user has changed to."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onGraphSet:1 of
msgid "Callback when the graph is set."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onGraphSet:4 of
msgid "graph: The graph that is being set as current."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onLoadGraph:1 of
msgid "Callback for when users wish to load a graph from the UI."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onLoadGraph:3 of
msgid ""
"A file dialog is opened and users can select the file to load. The last "
"directory the user saved or opened a graph from is used."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onNewGraph:1 of
msgid "Callback Executed when a call to create a new graph has been made."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onNewGraph:3 of
msgid ""
"This method deallocates the previous binding and creates a new one. It "
"also resets the undo stack, clears inline drawing, and sets the timeline."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onNodeEditRequested:1 of
msgid ""
"Method that is called when a request to edit the specified node has been "
"emitted."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onPortManipulationRequested:1
#: of
msgid ""
"Method to trigger value changes that are requested by manipulators in the"
" viewport."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onPortManipulationRequested:5
#: of
msgid "portName (str): Name of the port that is being driven."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onSaveGraph:1 of
msgid "Method called when the graph is saved."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.onSaveGraphAs:1 of
msgid "Method called when the graph is to be saved under a different file name."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.performSave:1 of
msgid "Writes the current graph to disk."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.performSave:4 of
msgid ""
"binding: The graph binding to save to disk. filePath (str): The file path"
" to which the binding is saved."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.saveGraph:1 of
msgid "Wraps the performSave method."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.saveGraph:3 of
msgid ""
"Opens a dialog for user to save the file if the lastFileName attribute is"
" not set or if the saveas argument is True. Otherwise it overwrites the "
"file which was opened."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.saveGraph:8 of
msgid "saveAs (bool): Whether to save the graph to a different file path."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.setBlockCompilations:1 of
msgid "Sets the graph to block compilations."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.setBlockCompilations:4 of
msgid "blockCompilations (bool): Whether to block compilations or not."
msgstr ""

#: FabricEngine.Canvas.CanvasWindow.CanvasWindow.updateFPS:1 of
msgid "Method for updating the FPS label in the status bar."
msgstr ""

#: ../../source/PythonGuide/index.rst:42
msgid "ScriptEditor"
msgstr ""

#: FabricEngine.Canvas.ScriptEditor:1 of
msgid ""
"The ScriptEditor is where Python code may be written and executed in the "
"context of the current Canvas scene. All Canvas commands that are "
"executed through the UI (e.g. creating a node, moving one, editing a "
"port, etc.) will also show up in the ScriptEditor as Python code so that "
"users can see exactly what Canvas is doing, and to assist in reproducing "
"issues that were initially triggered through the UI."
msgstr ""

#: ../../source/PythonGuide/index.rst:49
msgid "UICmdHandler"
msgstr ""

#: FabricEngine.Canvas.UICmdHandler:1 of
msgid ""
"The UICmdHandler is responsible for executing DFG commands sent from "
"other parts of the UI (for example from the Canvas DFGWidget)."
msgstr ""

#: FabricEngine.Canvas.UICmdHandler:4 of
msgid ""
"Each Canvas integration has its own UICmdHandler (for example Maya, or "
"Softimage) and this is the implementation for Python. The UICmdHandler "
"turns each command into a pure Python command and then sends it to the "
"ScriptEditor for execution. This allows logging all commands run by the "
"Canvas standalone as simple Python commands which can later be used to "
"recreate behaviors that were originally generated using the UI."
msgstr ""

#: ../../source/PythonGuide/index.rst:57
msgid "BindingWrapper"
msgstr ""

#: FabricEngine.Canvas.BindingWrapper:1 of
msgid ""
"The BindingWrapper wraps a Core DFGBinding in order to provide a simple "
"API for the DFG UI commands. Commands sent from the UICmdHandler are "
"executed in the ScriptEditor and the ScriptEditor uses the BindingWrapper"
" to actually invoke each command."
msgstr ""

#: FabricEngine.Canvas.BindingWrapper:6 of
msgid ""
"There is a 1-to-1 mapping of the methods provided by the UICmdHandler "
"(which receives commands from the UI) and the BindingWrapper (which "
"invokes the commands in the Fabric Core). The BindingWrapper also takes "
"care of adding all commands to a QUndoStack so that undo/redo "
"functionality is properly maintained."
msgstr ""

#: ../../source/PythonGuide/index.rst:65
msgid "LogWidget"
msgstr ""

#: FabricEngine.Canvas.LogWidget:1 of
msgid "The LogWidget receives and saves logging output from the ScriptEditor."
msgstr ""

#: ../../source/PythonGuide/index.rst:72
msgid "RTValEncoderDecoder"
msgstr ""

#: FabricEngine.Canvas.RTValEncoderDecoder:1 of
msgid ""
"The RTValEncoderDecoder is responsible for encoding and decoding RTVals "
"to and from strings. This is used by the ScriptEditor to allow sending "
"plain Python commands to the Core that include the contents of RTVals and"
" is also used by the Fabric Core for persistence to allow saving the "
"contents of a scene to JSON."
msgstr ""

#: ../../source/PythonGuide/index.rst:79
msgid "FabricParser"
msgstr ""

#: FabricEngine.Canvas.FabricParser:1 of
msgid ""
"The FabricParser handles parsing command line options for the Canvas "
"standalone."
msgstr ""

#: FabricEngine.Canvas.FabricParser.CheckExtension:1 of
msgid "Argparse action to check a file extension at loading."
msgstr ""

#: FabricEngine.Canvas.FabricParser.CheckExtension:4 of
msgid "choices (Dictionary): List of allowed extensions {'ext1, ext2, ...'}."
msgstr ""

#: FabricEngine.Canvas.FabricParser.FabricParser:1 of
msgid ""
"Specialize the argparse.ArgumentParser class. If an error occurs when "
"parsing the arguments,  the available options will be diplayed before "
"exiting."
msgstr ""

#~ msgid "Callback for when a hot key is pressed."
#~ msgstr ""

#~ msgid ""
#~ "key: Key that is pressed. modifiers: "
#~ "Modifiers that were pressed. hotkey "
#~ "(str): Hot key constant."
#~ msgstr ""

#~ msgid ""
#~ "Method to trigger value changes that "
#~ "are requested form manipulators in the"
#~ " viewport."
#~ msgstr ""

