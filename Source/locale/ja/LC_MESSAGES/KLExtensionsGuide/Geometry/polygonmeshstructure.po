#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: 2015-10-27 01:49+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"X-Generator: Poedit 1.8.5\n"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:4
msgid "PolygonMesh's structure"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:7
msgid "Introduction"
msgstr "概要"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:9
msgid ""
"The :kl-ref:`PolygonMesh` represents a geometric surface made of polygons, "
"where each polygon is defined by closed loop of 3 or more 3D points. A "
"point can be connected to multiple polygons. Although the basic definition "
"of a :kl-ref:`PolygonMesh` is pretty standard, the :kl-ref:`PolygonMesh` "
"structure contains special characteristics that allows it to balance "
"performance with memory consumption:"
msgstr ""
":kl-ref:`PolygonMesh` はポリゴン群で作られた幾何学表面(geometric surface)を"
"表し、それぞれのポリゴンは3つ以上の3Dポイント(以下\"頂点\")の閉じたループで"
"定義されます。1つの頂点は複数のポリゴンを結びつけることができます。 :kl-ref:"
"`PolygonMesh` の基本定義はとても標準的ですが、 :kl-ref:`PolygonMesh` 構造は"
"メモリ消費とパフォーマンスのバランスを取ることを可能にするという特性を含んで"
"います。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:14
msgid ""
"the structure identifies points and polygons with indices, but not edges or "
"polygonPoints (face-vertex). See :ref:`polygonmeshcomponents` for more "
"details."
msgstr ""
"構造はインデックス付けされた頂点とポリゴンで識別できます。エッジやポリゴン頂"
"点(フェース頂点(face-vertex))は含まれません。詳細は :ref:"
"`polygonmeshcomponents` をご覧ください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:17
msgid ""
"The :kl-ref:`GeometryAttribute` elements are all aligned for a direct "
"mapping to hardware drawing APIs such as OpenGL. See :ref:"
"`polygonmeshattributes` for more details."
msgstr ""
":kl-ref:`GeometryAttribute` 要素は、OpenGLなどのAPIハードウェアドローイング"
"のダイレクトマッピングのために整列されています。詳細は :ref:"
"`polygonmeshattributes` をご覧ください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:20
msgid ""
"When modifying the mesh structure, some particular rules apply. See :ref:"
"`modifyingpolygonmeshstructure` for more details."
msgstr ""
"メッシュ構造を変更する際には、いくつかの特別なルールが適用されます。詳細は :"
"ref:`modifyingpolygonmeshstructure` をご覧ください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:23
msgid ""
"the :kl-ref:`PolygonMesh` structure tries to reduce memory consumption and "
"fragmentation by grouping most of its topological data into a few "
"contiguous arrays, which can improve speed, particularly for larger meshes. "
"See :ref:`internalpolygonmeshdata` for more details."
msgstr ""
" :kl-ref:`PolygonMesh` 構造は、大半のトポロジーデータをいくつかの連続した配"
"列にグループ化することでメモリ消費と断片化の削減を試み、特にデータサイズの大"
"きなメッシュでは処理速度の向上を可能にします。詳細は :ref:"
"`internalpolygonmeshdata` をご覧ください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:27
msgid ""
"**Because the PolygonMesh makes heavy usage of arrays, `unguarded` KL "
"compilation typically provides a 30% speedup for most PolygonMesh methods.**"
msgstr ""
"**ポリゴンメッシュは配列を大量に使用するため、 通常`unguarded` KLコンパイル"
"は大半のポリゴンメッシュメソッド群で30％の高速化をもたらします**"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:32
msgid ""
"Unless stated otherwise, functions that read the mesh are threadsafe only "
"if the mesh structure or attribute sharing layout is not modified. "
"Functions that modify the mesh or the attribute sharing layout are not "
"threadsafe."
msgstr ""
"特に記述がない限り、メッシュの読み込みを行う関数はメッシュ構造やアトリビュー"
"トの共有レイアウトが変更されない場合にはスレッド セーフです。メッシュまたは"
"アトリビュートの共有レイアウトを変更する関数はスレッド セーフではありませ"
"ん。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:38
msgid "PolygonMeshTopology"
msgstr "ポリゴンメッシュトポロジー"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:40
msgid ""
"The :kl-ref:`PolygonMeshTopology` encapsulates the topological information "
"for a :kl-ref:`PolygonMesh`. It is mainly composed of two symmetric "
"structures, one storing point data and the other storing polygon data. Each "
"point is associated to an index, and has a compact array storing references "
"to the neighbor polygons' corners (polygonPoints). Similarly, each polygon "
"is associated to an index, and has a compact array storing references to "
"the connected points."
msgstr ""
":kl-ref:`PolygonMeshTopology` は1つの :kl-ref:`PolygonMesh` のトポロジー情報"
"をカプセル化します。これは主に頂点データとポリゴンデータの格納という2つのシ"
"ンメトリ構造から構成されます。各頂点はインデックスに関連付けられ、隣接するポ"
"リゴンのコーナー群 (ポリゴン頂点) へのリファレンスを格納したコンパクトな配列"
"を持っています。同様に、各ポリゴンもインデックスに関連付けられ、ポリゴンに連"
"結した頂点群へのリファレンスを格納したコンパクトな配列を持っています。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:48
msgid ""
"The following figures illustrate the concepts of points and polygons and "
"their local indices (`neighborPolygonIndex`, `neighborPointIndex`):"
msgstr ""
"次の図は、頂点やポリゴンそしてそれらのローカルインデックス "
"( 'neighborPolygonIndex', 'neighborPointIndex' ) の概念を示しています。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:53
msgid ""
"The following table shows a simplified view of the storage and relationship "
"between these components:"
msgstr "次の表は、ストレージ及びこれらのコンポーネント間の関係の概略図です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:57
msgid ""
"This example uses the :kl-ref:`PolygonMesh.getDesc` function to report the "
"structure corresponding to the illustrated mesh above."
msgstr ""
"この例では、上記図で示した構造のレポートを行うために :kl-ref:`PolygonMesh."
"getDesc` 関数を使用しています。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:73
msgid "More details about the various component types and indices:"
msgstr "様々なコンポーネント型やインデックスの詳細について:"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:75
msgid ""
":dfn:`point`: represented by an index, a point can be connected to a "
"varying number of polygons (or none). A polygon mesh point is the same as a "
"`vertex`. :kl-ref:`PolygonMesh` methods that get or set point specific data "
"usually begin with `.getPoint` or `.setPoint`, respectively."
msgstr ""
":dfn:`point`: インデックスで表され、１つの頂点は可変数のポリゴン (または無"
"し) に接続されます。ポリゴンメッシュの頂点は `vertex` と同じです。頂点の特定"
"データを取得または設定する :kl-ref:`PolygonMesh` 関数は、通常それぞれ `."
"getPoint` または `.setPoint` で開始します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:79
msgid ""
":dfn:`polygon`: represented by an index, a polygon is defined as an ordered "
"list of 3 or more points. :kl-ref:`PolygonMesh` methods that get or set "
"polygon specific data usually begin with `.getPolygon` or `.setPolygon`, "
"respectively."
msgstr ""
":dfn:`polygon`: インデックスで表され、1つのポリゴンは3つ以上の頂点の順序付け"
"リストで定義されます。ポリゴンの特定データを取得または設定する :kl-ref:"
"`PolygonMesh` 関数は、通常それぞれ `.getPolygon` または `.setPolygon` で開始"
"します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:85
msgid ""
":dfn:`neighborPolygon`: a point-polygon pair, which corresponds to one of "
"the polygons around a point. The `neighborPolygon` is represented by a pair "
"of indices formed by the point index and the `neighborPolygonIndex`. The "
"`neighborPolygonIndex` is a per point local index that ranges from `0` to :"
"kl-ref:`PolygonMesh.getPointPolygonCount` `()-1`, where each index "
"corresponds to a polygon connected to that point. The `neighborPolygon` and "
"the `polygonPoint` (described below) represent the same location, however "
"they are point-relative or polygon-relative, respectively."
msgstr ""
":dfn:`neighborPolygon`: 1つの頂点と、頂点を取り囲むポリゴン群の内の１つとの"
"ペアです。 `neighborPolygon` は、頂点インデックスと `neighborPolygonIndex` "
"によるインデックスのペアで表されます。 `neighborPolygonIndex` は頂点ごとに割"
"り振られた　[`0` ~ :kl-ref:`PolygonMesh.getPointPolygonCount` `()-1` ]の範囲"
"のローカルインデックスで、各インデックスは頂点に接続するポリゴンに相当しま"
"す。 `neighborPolygon` と `polygonPoint` (後述します)は同じ位置を指します"
"が、それぞれ'頂点からの相対位置'と'ポリゴンからの相対位置'です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:92
msgid ""
":dfn:`polygonPoint`: a polygon-point pair, which corresponds to the polygon "
"corner connecting a point (sometimes called a `face-vertex` or "
"`polygonNode` in other software). The `polygonPoint` is represented by a "
"pair of indices formed by the polygon index and the `polygonPointIndex`. "
"The `polygonPointIndex` is a per polygon local index that ranges from `0` "
"to :kl-ref:`PolygonMesh.getPolygonSize` `()-1`, where each index "
"corresponds to a point connected to that polygon. The `neighborPolygon` and "
"the `polygonPoint` (described below) represent the same location, however "
"they are point-relative or polygon-relative, respectively."
msgstr ""
":dfn:`polygonPoint`: 1つのポリゴンと、頂点に接続されたポリゴンの角にあたる部"
"分( `フェース頂点` や `ポリゴンノード` と呼ばれるもの)とのペアです。 "
"`polygonPoint` は、ポリゴンインデックスと `polygonPointIndex` によるインデッ"
"クスのペアで表されます。 `polygonPointIndex` はポリゴンごとに割り振られた "
"[ `0` ～ :kl-ref:`PolygonMesh.getPolygonSize` `()-1` ] の範囲のローカルイン"
"デックスで、各インデックスはポリゴンに接続する頂点に相当します。 "
"`neighborPolygon` と `polygonPoint` は同じ位置を指しますが、それぞれ'頂点か"
"らの相対位置'と'ポリゴンからの相対位置'です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:99
msgid ""
":kl-ref:`PolygonMeshEdge`: As opposed to most mesh structures, polygon "
"edges are not first-class components, but are rather represented by a "
"structure defined by a pair of polygon index and point index."
msgstr ""
":kl-ref:`PolygonMeshEdge`: 大半のメッシュ構造とは対照的に、ポリゴンエッジ群"
"はファーストクラスコンポーネントではありません。しかし、ポリゴンインデックス"
"と頂点インデックスのペアで定義される構造体によって表されます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:104
msgid ""
"The :ref:`PolygonMesh` structure does not associate edges and polygonPoints "
"(face-vertex) to explicit indices, which allows the structure to be more "
"compact by avoiding some redundancy. In general, this should not be an "
"issue since edge indices are usually not transfered from/to other mesh "
"representations such as DCC's. Avoiding to store edge and polygonPoint "
"tables allows the mesh structure to be at least 50% smaller than an "
"equivalent half-edge data structure, and is faster for most operations "
"because of memory locality."
msgstr ""
":ref:`PolygonMesh` 構造はエッジとポリゴン頂点群(フェース頂点)を明確なイン"
"デックスに関連付けせず、助長を回避することでよりコンパクトにできます。一般的"
"には、エッジインデックスはDCCツール等で他のメッシュに対し転送する、もしくは"
"転送されることは無いのでこれは問題にはならないでしょう。エッジやポリゴン頂点"
"のテーブルの格納を回避することは、同等のハーフエッジ構造よりも50%のデータ縮"
"小を可能にします。そして、メモリの局所性によって大半のオペレーションが高速で"
"実行されます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:111
msgid ""
"See :ref:`internalpolygonmeshdata` for more details about how the polygon "
"mesh structural data is organized."
msgstr ""
"ポリゴンメッシュ構造データの構成方法に関する詳細は :ref:"
"`internalpolygonmeshdata` を参照してください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:114
msgid "Bounds checking"
msgstr "境界チェック(Bounds checking)"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:116
msgid ""
"The :kl-ref:`PolygonMesh` internal structure stores multiple small arrays "
"in a single memory buffer. Because of this, most functions will explicitly "
"do, in KL guarded mode, a check to validate if indices respect the bounds "
"(using the `Fabric_Guarded` special KL condition). For example:"
msgstr ""
":kl-ref:`PolygonMesh` の内部構造は、単一のメモリ バッファーに複数の小さい配"
"列を格納します。このためKL guarded モードでは、大半の関数でインデックスが境"
"界を順守するかどうかの検証を（特殊な Fabric_Guarded KLコンディションを使用"
"し）明示的に行います。たとえば.."

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:120
msgid ""
"A function that takes a `point` and a `neighborPolygonIndex` will ensure "
"that the latter is within the [0 .. :kl-ref:`PolygonMesh."
"getPointPolygonCount` -1] range"
msgstr ""
"`point` と `neighborPolygonIndex` を取得する関数で、後者は [0 ～ :kl-ref:"
"`PolygonMesh.getPointPolygonCount` -1] の範囲内であると保証されます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:123
msgid ""
"A function that takes a `polygon` and a `polygonPointIndex` will ensure "
"that the latter is within the [0 .. :kl-ref:`PolygonMesh.getPolygonSize` "
"-1] range"
msgstr ""
"`polygon` と `polygonPointIndex` を取得する関数で、後者は [0 ～ :kl-ref:"
"`PolygonMesh.getPolygonSize` -1] の範囲内であると保証されます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:126
msgid ""
"Because of these explicit bound checks, and because the :ref:`PolygonMesh` "
"makes heavy usage of arrays, `unguarded` compilation typically provides a "
"30% speedup for most PolygonMesh methods."
msgstr ""
"これらの正確な限界値のチェックと :ref:`PolygonMesh` では配列の使用率が高いこ"
"とが合わさり、通常 `unguarded` コンパイルは大半のPolygonMeshメソッドで30%の"
"高速化をもたらします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:131
msgid "PolygonMesh Attributes"
msgstr "ポリゴンメッシュアトリビュート"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:133
msgid ""
"Like other :kl-ref:`Geometry` types, the :kl-ref:`PolygonMesh` stores its "
"attributes in a :kl-ref:`GeometryAttributes` container. This implies that "
"all :kl-ref:`GeometryAttribute` values are index-aligned and have the same "
"size, which allow the attribute value arrays to be mapped directly to "
"hardware drawing buffers such as OpenGL's. However, maintaining a global "
"value alignment while supporting value sharing around points requires "
"additional attribute management for the :kl-ref:`PolygonMesh`, and this has "
"some impact on the API."
msgstr ""
"他の :kl-ref:`Geometry` 型のように、 :kl-ref:`PolygonMesh` はアトリビュート"
"群を :kl-ref:`GeometryAttributes` コンテナに格納します。このことは、全ての :"
"kl-ref:`GeometryAttribute` の値は整列したインデックスで、かつ同じサイズを持"
"つことを意味し、アトリビュート値の配列をOpenGLのようなドローイングバッファー"
"に直接マッピングすることを可能にします。しかし、頂点の周りの共有の値をサポー"
"トすると同時にグローバル値の配置を維持するには、 :kl-ref:`PolygonMesh` にア"
"トリビュートの管理機能の追加を必要とします。そしてこれはAPIに影響を与えま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:139
msgid ""
"In the :kl-ref:`PolygonMesh` API, an :dfn:`attributeIndex` is relative to "
"the :kl-ref:`GeometryAttribute` value arrays (total of :kl-ref:"
"`GeometryAttributes.size` elements). The correspondence between a "
"`attributeIndex` and a point index is non-trivial, as it depends on the "
"sharing (splitting) layout of attribute values around points. If there is "
"an attribute split around a point (even for just one of many attributes), "
"then each `polygonPoint` value combinations point will be stored at a "
"different `attributeIndex`. It is guaranteed, however, that an "
"`attributeIndex` within the [0 .. :kl-ref:`PolygonMesh.pointCount` () - 1] "
"range is owned by the point of the same same index."
msgstr ""
":kl-ref:`PolygonMesh` のAPIにおいて、 :dfn:`attributeIndex` は :kl-ref:"
"`GeometryAttribute` の値の配列（ :kl-ref:`GeometryAttributes.size` のエレメ"
"ントの合計）と関連があります。 `attributeIndex` と頂点インデックスが一致する"
"かは、頂点の周りのアトリビュート値の共有（もしくは分割）レイアウトに依存する"
"重要な問題です。様々なアトリビュートの中で１つでも頂点を分割したアトリビュー"
"トが存在するなら、頂点と連結する各 `polygonPoint` の値は異なる "
"`attributeIndex`に格納されます。一方[0～:kl-ref:`PolygonMesh.pointCount` () "
"- 1] の範囲内の `attributeIndex` は、同じインデックスの頂点に所有します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:147
msgid ""
"The following figure shows how split attribute values cause additional "
"`attributeIndex` to be allocated:"
msgstr ""
"以下の図では、分割したアトリビュート値が `attributeIndex` へ追加で割り当てら"
"れる方法を紹介します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:152
msgid ""
"Notice that even the point position values are duplicated in order to "
"ensure global attribute alignment."
msgstr ""
"頂点位置の値についても、グローバルアトリビュートの配列を確保するために順に"
"沿って複製されることに注意してください。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:154
msgid ""
"The following example dumps the structure of that same mesh, along with "
"attribute values. The `attributeIndex` is only printed for points that have "
"unshared attribute values (splits):"
msgstr ""
"次の例では、アトリビュート値と共にメッシュ構造をダンプします。 "
"`attributeIndex` は共有していない(分割した)アトリビュート値を持つ頂点群のレ"
"ポートのみです。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:176
msgid "The following methods allow to set explicit attribute values:"
msgstr ""
"以下のメソッド群では、明示的なアトリビュート値をセットすることが可能です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:178
msgid ""
"Point-shared values (uniform values): :kl-ref:`PolygonMesh."
"setPointAttribute` `(Size point, io GeometryAttribute attribute, Value "
"value)`: these methods will ensure that all values are properly set in case "
"other attributes are unshared around the same point. The :kl-ref:"
"`PolygonMesh.setPointPosition` and :kl-ref:`PolygonMesh.setPointNormal` "
"specialized methods are similar. These methods don't change the attribute "
"sharing layout (`attributeIndex`), and are thread-safe if the attribute "
"sharing layout doesn't change."
msgstr ""
"頂点共有の値(一律の値)： :kl-ref:`PolygonMesh.setPointAttribute` `(Size "
"point, io GeometryAttribute attribute, Value value)`: これらメソッド群は、同"
"じ頂点でも非共有のアトリビュートがある場合に備えて、すべての値が明示的な設定"
"であると保証します。 :kl-ref:`PolygonMesh.setPointPosition` と :kl-ref:"
"`PolygonMesh.setPointNormal` の特別なメソッドは類似しています。これらメソッ"
"ドはアトリビュートの共通レイアウト( `attributeIndex` )を変更せず、レイアウト"
"が変更しない場合はスレッドセーフです。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:186
#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:201
msgid ""
"These methods were defined only for a specific set of GeometryAttribute "
"types (for example :kl-ref:`Vec3Attribute`). For other types, including "
"custom attribute types, simply extend the functionality by defining a "
"similar function in your code."
msgstr ""
"これらメソッドは、GeometryAttribute型(例えば :kl-ref:`Vec3Attribute` )の特定"
"のセットのみで定義されています。 カスタムアトリビュート型を含むような他の型"
"では、コード内で似たような関数を定義することで簡単に機能を拡張します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:190
msgid "Values that might be unshared around points:"
msgstr "頂点の周りで共有が解除される可能性のある値:"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:192
msgid ""
"Per point neighbor: :kl-ref:`PolygonMesh.setPointAttribute` `(Size point, "
"Size neighborPolygonIndex, io GeometryAttribute attribute, Value value)`"
msgstr ""
"隣接頂点ごと: :kl-ref:`PolygonMesh.setPointAttribute` `(Size point, Size "
"neighborPolygonIndex, io GeometryAttribute attribute, Value value)`"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:194
msgid ""
"Per polygon point: :kl-ref:`PolygonMesh.setPolygonAttribute` `(Size "
"polygon, Size polygonPointIndex, io GeometryAttribute attribute, Value "
"value)`"
msgstr ""
"ポリゴン頂点ごと: :kl-ref:`PolygonMesh.setPolygonAttribute` `(Size polygon, "
"Size polygonPointIndex, io GeometryAttribute attribute, Value value)`"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:196
msgid ""
"These methods will set the value to a specific neighbor polygon (polygon "
"point). They will check if the point sharing can be maintained by comparing "
"with the previously set values, and will allocate a new `attributeIndex` if "
"this is not possible. These methods are **not** thread-safe if they change "
"the attribute sharing layout (`attributeIndex`)."
msgstr ""
"これらのメソッドは、特定の隣接するポリゴン(ポリゴン頂点)に値を設定します。そ"
"れらは、以前に設定された値との比較によって頂点の共有が維持できるかどうかを"
"チェックし、可能でない場合には新しい `attributeIndex` を割り当てます。これら"
"のメソッド群は、アトリビュートの共有レイアウト( `attributeIndex` )を変更する"
"のであればスレッド セーフでは\"ありません\"。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:207
msgid ""
"In order to properly manage value sharing, the PolygonMesh internally "
"maintains a `Boolean initialized` state per attribute value, so it can "
"distinguish between explicitly set values and default values."
msgstr ""
"値の共有を正しく管理するために、ポリゴンメッシュは内部でアトリビュートごと"
"の `Boolean initialized` 状態を管理します。それは明示的に設定された値と既定"
"値の両者の区別をすることができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:210
msgid ""
"The :kl-ref:`PolygonMesh.resetAttributeAndAvoidSharingChanges` method can "
"avoid unrequired splitting and unsplitting of attribute values by trying to "
"maintain existing attribute sharing layout (`attributeIndex`)"
msgstr ""
":kl-ref:`PolygonMesh.resetAttributeAndAvoidSharingChanges` メソッドは、不要"
"な分割および既存のアトリビュートの共有レイアウト( `attributeIndex` )を維持し"
"ようとしたアトリビュート値を無効にすることができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:214
msgid ""
"The `attributeIndex` can be retrieved using either the :kl-ref:`PolygonMesh."
"getPointAttributeIndex` or the :kl-ref:`PolygonMesh."
"getPolygonAttributeIndex` method."
msgstr ""
"`attributeIndex` は :kl-ref:`PolygonMesh.getPointAttributeIndex` か :kl-ref:"
"`PolygonMesh.getPolygonAttributeIndex` メソッドのいずれかを使用して取得でき"
"ます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:217
msgid ""
"The :kl-ref:`PolygonMesh.arePointAttributesUniform` and the :kl-ref:"
"`PolygonMesh.isPointAttributeUniform` will tell if values for all or a "
"specific attribute are shared for a point, respectively."
msgstr ""
":kl-ref:`PolygonMesh.arePointAttributesUniform` と :kl-ref:`PolygonMesh."
"isPointAttributeUniform` は、それぞれ全てまたは特定のアトリビュートで値が１"
"つのポイントで共有されているかどうかを教えてくれます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:221
msgid ""
"Since the mesh maintains the attributes values aligned for being draw-API "
"friendly (OpenGL), the triangles draw list directly correspond to triplets "
"of `attributeIndex`. The :kl-ref:`PolygonMesh."
"generateAttributesTriangleList` method returns that list."
msgstr ""
"メッシュは描画API(OpenGLなど)で使いやすい整列されたアトリビュート値を維持す"
"るので、トライアングル描画リストは `attributeIndex` の3つセットと直接一致し"
"ます。 :kl-ref:`PolygonMesh.generateAttributesTriangleList` メソッドはそのリ"
"ストを返します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:228
msgid "Borders and wings"
msgstr "ボーダーとウィング"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:230
msgid ""
"While most points are usually connected to polygons forming a regular "
"surface (`manifold`), some have special topological features such as "
"`borders` and `wings`. If not treated with care, these rare features can be "
"the source of issues when walking on the mesh structure."
msgstr ""
"大半の頂点は、通常規則的なサーフェース( `manifold` )で形成するポリゴンに接続"
"されいると同時に、 `borders` と `wings` といった特別なトポロジーの特徴を持っ"
"ています。注意して処理しない場合、これらの珍しい機能はメッシュ構造を扱うとき"
"の問題の原因になります。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:234
msgid "A :dfn:`border` is an edge which is adjacent to a single polygon."
msgstr ":dfn:`border` は1つのポリゴンに隣接する境界エッジです。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:236
msgid ""
"A :dfn:`wing` is a set of polygons that are connected to a same point, and "
"form an adjacent group relatively to that point. In other words, a `wing` "
"is a suite of polygons that can be traversed by walking on non-border edges "
"around a given point."
msgstr ""
":dfn:`wing` は同じ頂点に接続しているポリゴン群のセットであり、その頂点に対し"
"て相対的に隣接するグループです。つまり `wing` は、指定された頂点の周りの非境"
"界エッジ群を横切ることができるポリゴン群のひとまとめのことです。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:239
msgid ""
"An `open` wing is a wing delimited by 2 borders. An `open` wing can contain "
"one or more polygons."
msgstr ""
"`オープンウィング` は2本の境界エッジで区切られたウィングです。 `オープンウィ"
"ング` は1つ以上のポリゴン群を含めることができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:241
msgid ""
"A `closed` wing is formed by a loop of polygons, where all edges of the "
"wing are not border edges. A `closed` wing can"
msgstr ""
"`クローズドウィング` は、ウィングのすべてのエッジが境界エッジではないポリゴ"
"ンのループによって形成されます。 `クローズドウィング` には2つ以上のポリゴン"
"が含まれます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:242
msgid "contain two or more polygons."
msgstr "."

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:244
msgid ""
"When point polygons are ordered (see :ref:`modifyingpolygonmeshstructure` "
"for point polygon ordering), it is guaranteed that the polygons part of a "
"same wing have consecutive `polygonNeighborIndex` for a given point."
msgstr ""
"頂点ポリゴン群が順序付けされたとき (頂点ポリゴンの順序付けについては :ref:"
"`modifyingpolygonmeshstructure` を参照してください)、指定した頂点に対して"
"ウィングが持つ連続した `polygonNeighborIndex` と同じポリゴン群が保証されま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:252
msgid "The following illustrates the concept of wings and borders:"
msgstr "イラストではウィングとボーダーの概念を示します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:256
msgid ""
"This example gathers wing and border information for point 0 using various "
"methods. The mesh corresponds to the previous illustration:"
msgstr ""
"この例では、さまざまな関数を使用して頂点0のウィングとボーダーの情報を収集し"
"ます。メッシュは、前の図に対応しています。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:320
msgid ""
"The point border and wing information can be retrieved with the :kl-ref:"
"`PolygonMesh.getPointBorderInfo` and :kl-ref:`PolygonMesh."
"getPointPolygonFullBorderInfo` methods."
msgstr ""
"頂点のボーダーとウィングの情報は、 :kl-ref:`PolygonMesh.getPointBorderInfo` "
"と :kl-ref:`PolygonMesh.getPointPolygonFullBorderInfo` メソッドで取得できま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:323
msgid ""
"The polygon border information can be retrieved with the :kl-ref:"
"`PolygonMesh.isPolygonBorder` method."
msgstr ""
"ポリゴンのボーダー情報は、 :kl-ref:`PolygonMesh.isPolygonBorder` メソッドで"
"取得できます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:325
msgid ""
"Given a `neighborPolygonIndex`, the previous and next "
"`neighborPolygonIndex` within the wing can be retrieved with the :kl-ref:"
"`PolygonMesh.getPointPrevNeighborPolygonIndexInWing` and the :kl-ref:"
"`PolygonMesh.getPointNextNeighborPolygonIndexInWing`, respectively."
msgstr ""
"`neighborPolygonIndex` について、ウィング内の前後の `neighborPolygonIndex` "
"は :kl-ref:`PolygonMesh.getPointPrevNeighborPolygonIndexInWing` と :kl-ref:"
"`PolygonMesh.getPointNextNeighborPolygonIndexInWing` で取得することができま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:332
msgid "Modifying the mesh structure"
msgstr "メッシュ構造の変更"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:334
msgid ""
"Various methods can modify the mesh structure, such as :kl-ref:`PolygonMesh."
"addPolygon`, :kl-ref:`PolygonMesh.createPoints` and :kl-ref:`PolygonMesh."
"deletePolygon`. All these functions are not threadsafe, and a calls to one "
"of these while another thread is accessing the mesh will cause an undefined "
"behavior."
msgstr ""
" :kl-ref:`PolygonMesh.addPolygon` , :kl-ref:`PolygonMesh.createPoints` や :"
"kl-ref:`PolygonMesh.deletePolygon` といった様々なメソッドは、メッシュ構造を"
"変更できます。これらすべての関数はスレッド セーフではなく、メッシュへアクセ"
"スしている別のスレッドを呼び出すことは未定義動作の原因となります。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:338
msgid ""
"When mentioned, the changes need to happen between a call to brackets :kl-"
"ref:`PolygonMesh.beginStructureChanges` and :kl-ref:`PolygonMesh."
"endStructureChanges` (or using `PolygonMeshStructureChangeBracket`). This "
"requirement, along with the point ordering notion (presented below), make "
"the mesh API more complex while allowing optimal performance."
msgstr ""
"ここで少しだけ触れておくと、メッシュ構造の変更は :kl-ref:`PolygonMesh."
"beginStructureChanges` と :kl-ref:`PolygonMesh.endStructureChanges` のブラ"
"ケット(または `PolygonMeshStructureChangeBracket` の使用)を呼び出した間で発"
"生させる必要があります。この要求は、頂点の配列の概念(以下に示す)に従い、最適"
"なパフォーマンスを可能にすると同時により複雑なメッシュAPIを作り出します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:343
msgid ""
"If some specific mesh modeling methods are called outside of structure "
"change brackets, an error message will be printed:"
msgstr ""
"いくつかの規定されたメッシュモデリングメソッドは、構造変更ブラケット外で呼ば"
"れた場合エラーメッセージが出力されます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:356
msgid ""
"The structure change bracket calls exist for the performance and practical "
"reasons presented below."
msgstr ""
"構造変更ブラケットの呼び出しは、パフォーマンスと以下に示す実用的な理由のため"
"に存在しています。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:361
msgid "Delayed point ordering"
msgstr "頂点の順序付けを遅らせる"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:363
msgid ""
"A point has `ordered polygons` if all its adjacent neighbor polygons have "
"consecutive `polygonPointNeighbor` indices for that point. Additionally to "
"update the polygon ordering around the point, the process of point ordering "
"also includes updating wing and border information for that point (see :ref:"
"`borderAndWings` )."
msgstr ""
"ある頂点に対し全ての隣り合う隣接ポリゴンが連続した 'polygonPointNeighbor' の"
"インデックスを有せば、頂点は `順序付けされたポリゴン群` を持っています。頂点"
"を囲むポリゴンの順序の更新に併せて、頂点の順序付けプロセスには頂点へのウィン"
"グやボーダーの情報の更新も含まれます( :ref:`borderAndWings` を参照してくださ"
"い)。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:368
msgid ""
"For an optimal performance when modifying multiple polygons, some methods "
"such as :kl-ref:`PolygonMesh.addPolygon` will not update point ordering "
"until the outer change bracket closes ( :kl-ref:`PolygonMesh."
"endStructureChanges` ). Using an internal list of the unordered points, the "
"mesh will then update only unordered points."
msgstr ""
"複数のポリゴンを修正する際、最適なパフォーマンスを得るために :kl-ref:"
"`PolygonMesh.addPolygon` のようないくつかのメソッドではメッシュ構造変更ブラ"
"ケットを閉じる( :kl-ref:`PolygonMesh.endStructureChanges` を使う)までは頂点"
"の順序を更新しません。順序付けされていない頂点の内部リストを用いて、メッシュ"
"は順序付けられていない頂点だけを更新するようにします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:373
msgid ""
"Delaying point polygons ordering in situations such as adding or deleting "
"multiple polygons allows for these two optimizations:"
msgstr ""
"複数ポリゴンを追加または削除するといった状況で頂点ポリゴン群の順序付けを遅ら"
"せることは、これら２つの最適化を可能にします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:375
msgid ""
"Since a point is typically adjacent to 4 or more polygons, this allows the "
"point ordering to be updated only once instead of being updated for each "
"added or removed adjacent polygon."
msgstr ""
"１つの頂点は通常 4 つ以上のポリゴンに隣接しているため、隣接するポリゴンを追"
"加または削除するたびに更新するのではなく、一度だけの更新で頂点の順序付けを行"
"うようにします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:378
msgid ""
"Since there might be many unordered polygons to update (particularly after "
"building a full mesh), all points can be reordered in batch, taking "
"advantage of multithreading."
msgstr ""
"多数の順序付けされていないポリゴン(特に全メッシュの構築後)に更新がかかる可能"
"性があり、全頂点はマルチスレッドを活かしたバッチ内で並べ替えることができま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:381
msgid ""
"Most methods querying a point that has unordered polygons will report an "
"error (under `guarded` KL compilation only). Similarly, methods querying "
"polygon adjacency information might require some connected points to be "
"properly ordered, and will report a similar error."
msgstr ""
"順序付けされていないポリゴン群を持つ頂点を照会する大半のメソッドは、"
"( `guarded` KL をコンパイルする場合でのみ) エラーをレポートします。同様に、"
"ポリゴンの隣接情報を照会するメソッド群が適切に順序付けされた頂点を必要とした"
"場合、同様のエラーをレポートします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:397
msgid ""
"In special situations, it might be required to force a point polygons "
"reordering even within a structure change bracket. The following methods "
"allow to perform such an update:"
msgstr ""
"特殊な状況では、構造変更ブラケット内であっても強制的に頂点ポリゴンの順序付け"
"を行う必要があるかもしれません。以下のメソッドは、このような更新を許可しま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:400
msgid ""
":kl-ref:`PolygonMesh.updatePointsPolygonOrder` : will reorder polygons for "
"all unordered points."
msgstr ""
":kl-ref:`PolygonMesh.updatePointsPolygonOrder` : すべての順序付けされていな"
"い全ての頂点に適するようにポリゴン群を順序付けます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:402
msgid ""
":kl-ref:`PolygonMesh.updatePointPolygonOrder` : will reorder polygons for a "
"specific point if unordered."
msgstr ""
":kl-ref:`PolygonMesh.updatePointPolygonOrder` : 順序付けされていない特定の頂"
"点のためにポリゴンを順序付けます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:406
msgid ""
"The :kl-ref:`PolygonMesh.addPolygonAndUpdateStructure` is similar to the :"
"kl-ref:`PolygonMesh.addPolygon` method however it will reorder the related "
"points immediately."
msgstr ""
":kl-ref:`PolygonMesh.addPolygonAndUpdateStructure` は :kl-ref:`PolygonMesh."
"addPolygon` メソッドに似ていますが、関連する頂点を直ちに順序付けます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:412
msgid "Replacement of deleted component indices"
msgstr "削除されたコンポーネントインデックス群の置換"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:414
msgid ""
"In general, the :kl-ref:`PolygonMesh` maintains a contiguous range (`0.."
"N-1`) of point and polygon indices. Because of this, it is usually safe to "
"iterate over polygons and points using a simple index loop."
msgstr ""
"一般的に、 :kl-ref:`PolygonMesh` は頂点とポリゴンのインデックスの連続した範"
"囲(`0..N-1`)を維持します。このため、シンプルなインデックスループを用いたポリ"
"ゴンや頂点の反復処理は安全です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:417
msgid ""
"However, when a modeling operation such as :kl-ref:`PolygonMesh."
"deletePolygon` removes points or polygons, the related indices will remain "
"unused until the outer :kl-ref:`PolygonMesh.endStructureChanges` bracket is "
"called. The goal of this policy is to allow a safe and stable use of "
"polygon and point indices over multiple modeling operations."
msgstr ""
"ただし :kl-ref:`PolygonMesh.deletePolygon` のような頂点やポリゴンを削除する"
"モデリングオペレーションでは、関連するインデックスは :kl-ref:`PolygonMesh."
"endStructureChanges` ブラケットが呼ばれるまで未使用のまま存在し続けます。こ"
"の方策の目的は、複数のモデリングオペレーションで安全かつ安定的にポリゴンや頂"
"点のインデックスの使用を可能にすることです。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:421
msgid ""
"This implies that the code that processing a mesh with removed components "
"needs to be aware that some indices can be invalid (deleted components). "
"The :kl-ref:`PolygonMesh.isPolygonDeleted` and :kl-ref:`PolygonMesh."
"isPointDeleted` methods allow to verify if a specific index is valid."
msgstr ""
"これは、コンポーネント群を削除したメッシュを処理するコードでは、インデックス"
"がすでに無効（コンポーネントが削除された）となっているものがあるため注意を要"
"します。PolygonMesh.isPolygonDeleted や PolygonMesh.isPointDeletedメソッドを"
"使用することで、ある特定のインデックスが有効であるかを確認することができま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:425
msgid ""
"Once the outer :kl-ref:`PolygonMesh.endStructureChanges` is reached, the "
"mesh will recompact indices by replacing unused indices with the last valid "
"ones and reduce the index range accordingly. At this point, it is safe "
"again to iterate over all points or polygons using a simple index loop."
msgstr ""
"一度 :kl-ref:`PolygonMesh.endStructureChanges` に達すると、メッシュは利用可"
"能な未使用インデックスに置き換えることによってインデックスを圧縮し直し、イン"
"デックスの範囲を減らします。この時点で、シンプルなインデックス ループを使用"
"する全ての頂点やポリゴンにおいて反復処理は再び安全です。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:432
msgid "Internal data organization"
msgstr "内部データの構成"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:434
msgid ""
"The internal data structure of the :kl-ref:`PolygonMesh` is very complex in "
"order to allows both a low memory consumption and fast query and modeling "
"operations. In order to achieve this, the structure does the following:"
msgstr ""
":kl-ref:`PolygonMesh` の内部データ構造は、低いメモリ消費量と高速なクエリとモ"
"デリングオペレーションのを可能にするために非常に複雑です。これを達成するため"
"には、内部データ構造は次のことを行います。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:438
msgid ""
"Minimizes redundancy by avoiding to store edge and polygonPoint (face-"
"vertex) information"
msgstr ""
"エッジとポリゴン頂点 (フェース頂点) 情報の格納を避けることによって冗長性を最"
"小限に抑えます"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:440
msgid ""
"Packs polygon and point data in contiguous memory space, using a special "
"allocators (:kl-ref:`ArrayOffsetAllocator`) which allow to keep these "
"arrays in a single memory buffer. This lowers memory fragmentation, which "
"reduces memory usage, but more importantly improves the speed of all mesh "
"operations by making a more efficient usage of the CPU memory cache. When a "
"certain proportion of the memory buffer is free (eg: after deleting many "
"polygons), the mesh will automatically recompact all its internal data to "
"ensure optimal memory usage."
msgstr ""
"シングルメモリバッファに配列群を保つことを可能にする特別なアロケータ (:kl-"
"ref:`ArrayOffsetAllocator`) を使うことで、連続したメモリ空間にポリゴンと頂点"
"データをパックします。これはメモリ使用量を低減しメモリの断片化を下げますが、"
"より重要なのはCPUメモリキャッシュの効率的な使用を行うことで全てのメッシュオ"
"ペレーターの速度が向上することです。一定割合のメモリバッファがフリーの時"
"(例：多くのポリゴンを削除した後）、メッシュは最適なメモリ使用量を確保するた"
"めに全ての内部データを自動的に再圧縮します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:447
msgid ""
"Uses indices of 32 bits or less for indirections, which reduces memory "
"usage by 50% compared to mesh implementations that are based on 64-bit "
"pointers. Another advantage is that the structure is memory location "
"independent, making copy operations faster."
msgstr ""
"32 ビットのインデックスか少しのインダイレクションの使用で、64ビットのポイン"
"タに基づいた実装のメッシュと比較してメモリ使用量を50%低減します。別の利点と"
"して、独立したメモリロケーションにあり、高速なコピー操作を行えます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:451
msgid ""
"Encodes polygon and point data using special bit packing, which allows to "
"reduce memory consumption by another 50%. For example, the \"polygon + "
"pointNeighborIndex\" pair is encoded as a single UInt32 in most cases."
msgstr ""
"特別なビットパッキングを使用してポリゴンと頂点データをエンコードし、さらに"
"50%のメモリ消費量を低減できます。例えば \"polygon + pointNeighborIndex\" ペ"
"アは、ほとんどの場合単体のUInt32としてエンコードされます。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:455
msgid ""
"Reduces memory cache misses by reducing the indirections for operations "
"that require to jump between point and polygon data (by storing direct data "
"offsets)."
msgstr ""
"頂点とポリゴンのデータ(データオフセットを直接格納する) の間でジャンプするこ"
"とを必要とするオペレーションのためのインダイレクションを減らすことによって、"
"メモリのキャッシュミスを削減します。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:458
msgid ""
"Stores the global `attributeIndex` data (if unshared attributes) into the "
"point data, avoiding per-attribute index tables, and maintaining GPU "
"drawing friendly buffers (see :ref:`polygonmeshattributes`)"
msgstr ""
"グローバルな `attributeIndex` (アトリビュートが非共有な場合の)データを頂点"
"データ内に格納し、アトリビュートごとのインデックステーブルの発生を防ぎ、バッ"
"ファに優しいGPU描画を維持します(詳しくは :ref:`polygonmeshattributes` を参照"
"してください)。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:462
msgid ""
"The following figure presents an overview of the mesh internal data "
"structure. The `pointData` and `polygonData` are implemented as "
"symmetrical :kl-ref:`ArrayOffsetAllocator` structures, and their content "
"refer to each others. A `pointIter` and a `polyIter` designate an offset "
"(UInt32) within the packed point or data buffer, respectively. The "
"`startIters` array simply contains the offsets (`pointIter` or `polyIter`) "
"corresponding to a point or polygon index. The `neighbor polygons` and "
"`polygon points` arrays directly contain offsets (`polygonIter` and "
"`pointIter`), which allows to access connected point and polygon data "
"directly."
msgstr ""
"下の図はメッシュの内部データ構造の概念を表します。 `pointData` と "
"`polygonData` は :kl-ref:`ArrayOffsetAllocator` 構造群の対称として実装され、"
"それらコンテンツはお互いを参照します。1つの `pointIter` と1つの `polyIter` "
"はそれぞれパックされた頂点かデータバッファ内のオフセット(UInt32型)を指定しま"
"す。 `startIters` 配列は頂点もしくはポリゴンインデックスに対応するオフセット"
"(`pointIter` か `polyIter`) を含み、頂点とポリゴンデータを直接呼び出すことを"
"可能にします。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:475
msgid "Current limitations"
msgstr "現在の制限"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:477
msgid ""
"The :kl-ref:`PolygonMesh` structure currently has the following limitations:"
msgstr ":kl-ref:`PolygonMesh` 構造には現在次の制限があります。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:479
msgid ""
"The mesh polygons are always triangulated as triangle fans, which can "
"produce artifacts for concave polygons."
msgstr ""
"メッシュのポリゴン群は常に三角形化され、凹形ポリゴンを生成することができま"
"す。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:482
msgid "Polygon holes are not supported."
msgstr "ポリゴンのホールはサポートされていません。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:484
msgid "There are no per polygon, or polygon-shared attributes."
msgstr "ポリゴンごとやポリゴン共有のアトリビュートは存在しません。"

#: ..\..\source\KLExtensionsGuide\Geometry\polygonmeshstructure.rst:486
msgid ""
"The modeling API lacks various base functions, such as collapseEdge or "
"mergePoints, which should be added in the future."
msgstr ""
"モデリングAPIにはcollapseEdgeやmergePointsといった様々な基本機能が欠けてお"
"り、将来的に追加されるはずです。"
