#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/DebuggingGuide/zbug.rst:4
msgid "Introduction"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:6
msgid ""
"zBug (pronounced zee-BUG) is a front end to the LLDB debugger (see "
"http://lldb.llvm.org). It allows source-level debugging of KL programs "
"under Linux. More details can be found in our `Fabric zBug repository "
"<https://github.com/fabric-engine/zBug>`_ on github."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:9
msgid "Using zBug"
msgstr "zBug の使用"

#: ../../source/DebuggingGuide/zbug.rst:12
msgid "Setting up the Environment"
msgstr "環境設定"

#: ../../source/DebuggingGuide/zbug.rst:14
msgid ""
"By default KL code is compiled with full optimization and with no debug "
"info in order to reduce memory use as much as possible and to make the KL"
" code run as fast as possible. However in order to debug you will need at"
" the very least to include debug info with your KL code, and in order to "
"take full advantage of all debugging features you will likely want to "
"disable optimization. Fortunately both of these are automatically done "
"for you when launching a Fabric application from zBug."
msgstr ""
"KLコードは、可能な限りのメモリの節約と高速動作のため、ディフォルトで完全な最適化がかかり、デバッグ情報を含めずコンパイルされます。しかしデバッグするためには、すくなくともデバッグ情報をKLコードに埋め込み、さらにデバッグ機能を全開に活用するためには最適化を無効にします。幸いにも、zBug"
" 経由で Fabric アプリケーションを起動すると両方の設定を自動で行います。"

#: ../../source/DebuggingGuide/zbug.rst:16
msgid ""
"When a Fabric application is launched from zBug the following environment"
" variables are automatically set:"
msgstr "zBug 経由で Fabric アプリケーションを起動すると、以下の環境変数が自動で設定されます:"

#: ../../source/DebuggingGuide/zbug.rst:23
msgid ""
"This will enable debug info and disable optimizations. For more detailed "
"information on what these environment variables do you can see this "
"section: :ref:`DG.envvars`."
msgstr ""
"これによってデバッグ情報が有効になり、最適化が無効になります。これら環境変数についてのより詳しい情報は  :ref:`DG.envvars` "
"節を参照してください。"

#: ../../source/DebuggingGuide/zbug.rst:26
msgid "Launching an Application"
msgstr "アプリケーションの起動"

#: ../../source/DebuggingGuide/zbug.rst:28
msgid ""
"The current version of zBug requires launching the Fabric application "
"within zBug in order to provide debugging capabilities. For most "
"applications this is as simple as pre-pending zBug to the command being "
"run:"
msgstr ""
"現行バージョンの zBug はデバッグ機能の提供のためには、zBug 内から "
"Fabricアプリケーションを起動する必要があります。ほとんどのアプリケーションでは、zBug 実行コマンドにちょっと付け加えるだけで済みます。"

#: ../../source/DebuggingGuide/zbug.rst:34
msgid ""
"For example debugging a Fabric Engine Python application could be "
"launched like this:"
msgstr "Fabric Engine Pythonアプリケーションのデバッグ実行例:"

#: ../../source/DebuggingGuide/zbug.rst:41
msgid "Debugging Maya"
msgstr "Maya でのデバッグ"

#: ../../source/DebuggingGuide/zbug.rst:43
msgid ""
"Maya under Linux can't be launched as above however Maya provides a -d "
"command-line option that allows it to be started within a debugger. "
"Running Maya inside zBug is as simple as providing this option and "
"pointing it to zBug:"
msgstr ""
"Linux版の Maya は上記コマンドでは実行できません、かわりに Mayaには -d "
"というコマンドラインオプションがあり、デバッガをスタートさせルオプションです。zBug ないで Maya "
"を実行するにはこのオプションを使い、zBug を指定します。"

#: ../../source/DebuggingGuide/zbug.rst:50
msgid "Attaching to a Running Application"
msgstr "実行中のアプリケーションへのアタッチ"

#: ../../source/DebuggingGuide/zbug.rst:52
msgid ""
"If zBug is launched without any command-line parameters it will look for "
"a Fabric application running in debug mode (FABRIC_DEBUG=2) and "
"automatically connect to this process if it exists. The process is "
"located via a PID file found in the user's Fabric application data "
"folder."
msgstr ""
"コマンドラインパラメータ無しで起動すると、zBug はデバッグモードで実行中の "
"Fabricアプリケーション(FABRIC_DEBUG=2)を探し、存在するなら自動的にそのプロセスへの接続を行います。接続先プロセスは、ユーザの"
" Fabric アプリケーションデータフォルダ中にある、 PIDファイルを通して検索されます。"

#: ../../source/DebuggingGuide/zbug.rst:54
msgid ""
"Since in this case Fabric will start before zBug, you will need to "
"manually set `export FABRIC_DEBUG=2` and `export FABRIC_OPT_TYPE=2` "
"before starting the application, otherwise zBug will not see the KL "
"debugging symbols."
msgstr ""
"この場合、zBug よりも先に Fabric をスタートさせ、さらにはスタート前に手動で  `export FABRIC_DEBUG=2`, "
"`export FABRIC_OPT_TYPE=2` と設定する必要があります。さもなければ zBug から "
"KLのデバッグシンボルが不可視となってしまいます。"

#: ../../source/DebuggingGuide/zbug.rst:56
msgid ""
"If there is more than one Fabric application running on the system at a "
"given time then the user can supply a -p parameter to zBug to specify the"
" process ID of the Fabric process to connect to. In the case of Fabric "
"running within a DCC, this process ID will normally be that of the DCC "
"itself."
msgstr ""
"システムに複数の Fabricアプリケーションが実行中である場合では、zBug に -p "
"パラメータを指定し、接続を行いたいアプリケーションのプロセスIDを満たします。DCC中で実行中の Fabric "
"であれば、プロセスIDは通常DCC自身の ID となります。"

#: ../../source/DebuggingGuide/zbug.rst:62
msgid ""
"Once connected with zBug debugging can occur as it would for a process "
"launched from within zBug. Simply closing zBug will disconnect from the "
"running process and allow execution to continue normally."
msgstr ""
"zBug と接続がなされると、zBug から起動した時と同じようにデバッグ可能となります。zBug "
"を閉じるとプロセスと切断しますが、実行は継続します。"

#: ../../source/DebuggingGuide/zbug.rst:64
msgid ""
"Depending on the version of Linux you're using you may need to run zBug "
"as root if you're attaching to a process. You will see an error message "
"like this if you try to run as a normal user:"
msgstr ""
"Linuxのバジョンによっては、プロセスのアタッチに zBug "
"をルート権限で走らせる必要があります。この場合通常ユーザで思考すると以下のエラーメッセージが表示されます:"

#: ../../source/DebuggingGuide/zbug.rst:70
msgid ""
"This is a security measure of certain distros and not a limitation of "
"zBug."
msgstr "これは zBugの制限ではなく、特定Linuxディストリビューションのセキュリティ要件にもとづくものです。"

#: ../../source/DebuggingGuide/zbug.rst:73
msgid "User Interface"
msgstr "ユーザインタフェース "

#: ../../source/DebuggingGuide/zbug.rst:75
msgid ""
"The zBug user interfaces tries to keep its defaults as simple as possible"
" while leaving access to more advanced debugging features open to those "
"who need them. The interface is written in Python and uses PySide for its"
" UI elements. As such it is very configurable, both from a source code "
"level as well as from within the UI itself."
msgstr ""
"zBug "
"のユーザインタフェースは、必要に応じて必要な機能にアクセスできるように保ったままディフォルトで可能な限りシンプルであるように努めています。インタフェースの各要素は、Python,"
" PySide で記述されます。これにより、ソースコードからもUI自身からも容易に設定の改変が可能になっています。"

#: ../../source/DebuggingGuide/zbug.rst:77
msgid ""
"Inside each subwindow in the UI (except for the source code window, which"
" is fixed) there is a button at the top right corner of the subwindow "
"that will cause it to pop out so that it can be moved around the screen. "
"With this a user is able to configure zBug to have exactly the windows "
"that are most important in the places that make the most sense."
msgstr "UIの各サブウィンド内部には、左上隅にボタンがあり、メインウィンドから分離させ画面上どこへで動かせるようになります。（ソースコードウィンドだけは例外で固定されています）これにより、ユーザは最も重要なものを望みの場所へと持って行きシーンを構成することができます。"

#: ../../source/DebuggingGuide/zbug.rst:80
msgid "Interrupts and Breakpoints"
msgstr "インタラプト(中断)・ブレークポイント"

#: ../../source/DebuggingGuide/zbug.rst:82
msgid ""
"When debugging an application in zBug the application may either be "
"running or else in an interrupted or breakpoint state (we'll refer to "
"this as being stopped). Controls within a stopped state are the same, "
"however most of the functionality in zBug is disabled while the "
"application is running."
msgstr ""
"zBugで、あるアプリケーションが<実行中>であろうと、 <インタラプト中>, "
"<ブレークポイント中>どれであろうとデバッグ可能です。ただし<終了><実行中>の状態では zBugの大半の機能は無効です。"

#: ../../source/DebuggingGuide/zbug.rst:84
msgid ""
"In order to interact with a running application a user will first have to"
" click the Interrupt button in order to stop execution. When zBug enters "
"an interrupted or breakpoint state the UI will update all relevant "
"sections to indicate where the program has stopped. If there is source "
"code available for the current position the :ref:`DG.zbug.source` section"
" will be updated to display this source code and the current line will be"
" highlighted in yellow. The interface will update in the same way if a "
"breakpoint is hit, and the line currently breakpointing will also be "
"highlighted in yellow."
msgstr ""
"実行中のアプリケーションとやり取りをするには、まずインタラプトボタンを押し、実行をストップさせます。zBug が <インタラプト>, "
"<ブレークポイント> "
"状態に突入すると、UIはプログラムがどこで止まったかを示すセクションをアップデートします。その位置の利用可能なソースコードががあれば、  "
":ref:`DG.zbug.source` "
"セクションを更新し、ソースコードを表示し現在行を黄色にハイライトします。ブレークポイントがヒットした際にも同様です。"

#: ../../source/DebuggingGuide/zbug.rst:86
msgid ""
"Source code will not exist for all possible execution points within a "
"running Fabric application, since the C++ code for the closed Fabric "
"application itself is not available to end users, and neither are code "
"sections and function calls that live within the DCCs. The "
":ref:`DG.zbug.source` subwindow will indicate if the source code for the "
"given frame is available or not. However all KL code used in your "
"application should always be available."
msgstr ""
"実行中のFabricアプリケーションの全ての実行位置に対してソースコードが必ず存在するはけではありません。例えば、Fabricそれ自身C++のコードがクローズドであるため、エンドユーザには利用可能ではありません。一方コードセクションや、関数コールどちらもDCC上では有効です。与えられフレームでのソースコードが利用可能であろうがなかろうが、"
" :ref:`DG.zbug.source` "
"がサブウィンドに表示されます。ユーザのアプリケーションで使用されるKLコードは常に利用可能ではあります。"

#: ../../source/DebuggingGuide/zbug.rst:88
msgid ""
"Any breakpoints in the source code currently loaded will show up as a red"
" line in the source file. A complete list of current breakpoints across "
"all source files is available in the :ref:`DG.zbug.breakpoints` "
"subwindow."
msgstr ""
"読み込まれているソースコード中の全てのブレークポイント行は、ソース・ファイル中に赤く表示されます。ソースコードをまたいだ全ブレークポイントの一覧は、"
"  :ref:`DG.zbug.breakpoints`  サブウィンドに表示されます。"

#: ../../source/DebuggingGuide/zbug.rst:91
msgid "UI Sections"
msgstr "UIセクション"

#: ../../source/DebuggingGuide/zbug.rst:96
msgid "Breakpoints"
msgstr "ブレークポイント"

#: ../../source/DebuggingGuide/zbug.rst:98
msgid ""
"The breakpoints window lists all breakpoints currently set in the "
"program. Clicking on any breakpoint found here will open up the source "
"file and line where the breakpoint is set in the :ref:`DG.zbug.source` "
"window."
msgstr ""
"ブレークポイントウィンドでは、プログラム中に設定中の全てのブレークポイントを一覧します。いずれかのブレークポイントをクリックすると、該当ソースファイルを開き、"
" :ref:`DG.zbug.source` ウィンドに仕掛けられた箇所を表示します。"

#: ../../source/DebuggingGuide/zbug.rst:100
msgid ""
"In the current release there is an extra internal breakpoint that always "
"shows up in this list and can simply be ignored. It will be hidden in a "
"future version."
msgstr "現行リリースでは、内部的なエクストラブレークポイントが存在し、リストに常に表示されるものの無視可能となっているものがあります。将来のバージョンでは不可視とする予定です。"

#: ../../source/DebuggingGuide/zbug.rst:103
msgid "Control Toolbar"
msgstr "コントロールツールバー"

#: ../../source/DebuggingGuide/zbug.rst:105
msgid ""
"The topmost area of zBug holds the process control toolbar and contains "
"buttons to control execution and process flow of the application being "
"debugged."
msgstr "zBug の最上部領域には、プロセスコントロールツールバーがあり、アプリケーションのデバッグフローを実行/処理の制御のためのボタンがあります。"

#: ../../source/DebuggingGuide/zbug.rst:107
msgid ""
"Start: When a zBug session is opened this is the only button accessible "
"and clicking it will launch the process being debugged."
msgstr "Start（開始）: zBug セッションを開いている場合、このボタンのみが押下可能です。プロセスのデバッグを開始します。"

#: ../../source/DebuggingGuide/zbug.rst:109
msgid ""
"Interrupt: Once the debugged application is running, clicking Interrupt "
"at any time will stop its execution and return control to zBug. At that "
"point you can browse any code that's been loaded to that point, you can "
"view where the execution has stopped by looking at the "
":ref:`DG.zbug.stack` or :ref:`DG.zbug.threads` and you can set "
"breakpoints."
msgstr ""
"Interrupt（中断）: "
"デバッグ対象のアプリケーションが実行中の場合、インタラプトを押すことでいつでも実行を中断し、zBugへ制御を戻します。以降、「この時点で読み込まれている」どのコードもブラウズ可能となり、どこで実行が中断となっているかを、"
" :ref:`DG.zbug.stack` あるいは :ref:`DG.zbug.threads` "
"から確認可能となります。またそこへブレークポイントを設定することもできます。"

#: ../../source/DebuggingGuide/zbug.rst:111
msgid ""
"Continue: When in a stopped state you may click Continue to tell the "
"application to continue running."
msgstr "Continue（継続）: 中断状態のさいクリックするとアプリケーションの実行を継続します。"

#: ../../source/DebuggingGuide/zbug.rst:113
msgid ""
"Step In: When in a stopped state you may use Step In to bring execution "
"inside the function currently being highlighted in the "
":ref:`DG.zbug.source` subwindow. If it's not possible for execution to go"
" inside the function on the currently highlighted line (for example if "
"the line is a simple variable assignment) then behavior is the same as "
"for Step Over."
msgstr ""
"Step In（ステップイン）: 中断状態の場合、ステップインにより :ref:`DG.zbug.source` "
"サブウィンドにハイライト表示された現在位置の関数内部のステップインを実行します。現在位置での関数内部の実行が不可能なばあい（ただの単純な変数代入など）、ステップオーバと同じ挙動になります。"

#: ../../source/DebuggingGuide/zbug.rst:115
msgid ""
"Step Over: When in a stopped state you may Step Over the current "
"instruction to allow execution to continue down the current file. Step "
"Over does not necessarily take you to the next line as there may be "
"several instructions that need to execute on the line that's currently "
"selected, for example the line :code:`for (Integer i=0; i<5; i++) {` "
"contains an assignment, a comparison, and a variable increment, and each "
"of these will be processed individually before moving on to the next line"
" in the KL file."
msgstr ""
"Step Over（ステップオーバー）: "
"中断状態の場合、現在の命令をステップオーバーし、現在のファイルの続きを再開します。ステップオーバーでは「次の行」 "
"―つまり現在選択している行の実行に必要な幾つかの命令を含むような行― を必要としません。例:  :code:`for (Integer i=0; "
"i<5; i++) {` では代入、比較、変数インクリメントを含みます。KLファイルの実際の次の行に行くよりも先にどれも別個に処理されます。"

#: ../../source/DebuggingGuide/zbug.rst:117
msgid ""
"Step Out: When in a stopped state you may Step Out of the current "
"function into its calling function. This will bring execution to the "
"current function's caller as seen in the :ref:`DG.zbug.stack`."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:120
msgid "Disassembly"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:122
msgid ""
"This window will probably not be used by most users but provides access "
"to the assembly code for the source code visible in the currently "
"selected frame."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:125
msgid "LLDB"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:127
msgid ""
"This window gives a standard LLDB console, opening up access to any LLDB "
"functionality that is not provided through the zBug UI. It's not expected"
" that users will need to enter manual LLDB commands but more advanced "
"users may want access and it's provided for that reason. A tutorial on "
"basic LLDB commands is available here: `LLDB Tutorial "
"<http://lldb.llvm.org/tutorial.html>`_."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:130
msgid "Locals"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:132
msgid ""
"In this section all local variables found in the scope of the current "
"stop position will be listed, whether in C++ code or KL. Variables with "
"some structure (for example KL :code:`struct` and :code:`object`) can be "
"unfolded using the '+' symbol next to the variable name to inspect values"
" at each level of the type's hierarchy."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:134
msgid ""
"Currently for certain KL types such as :code:`object` or variable arrays "
"you will see type members that don't form part of the type that you "
"defined in KL code. These refer to internal KL data that isn't normally "
"seen by users but is useful for Fabric Core team developers when working "
"on the KL compiler. These may be hidden in a future version but for now "
"show up in the UI and can simply be ignored."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:136
msgid ""
"Support is also missing for some KL types, specifically dictionaries, "
"interfaces, and Map-Reduce producers. These will be added in an upcoming "
"release."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:139
msgid "Output"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:141
msgid ""
"The output window displays any output that would normally be printed to "
"the command-line in a console application."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:144
msgid "Registers"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:146
msgid ""
"Most users will not make use of this subwindow but it provides access to "
"the CPU register values in the currently highlighted frame."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:151
msgid "Source Code"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:153
msgid ""
"The source window is the main window of the zBug application and displays"
" the source code (if available) for the currently selected frame in the "
":ref:`DG.zbug.stack` window."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:158
msgid "Sources List"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:160
msgid ""
"The sources list in zBug defaults to only displaying KL code that's been "
"received from the debugged application. Clicking on any KL source file in"
" this list will open up its source code into the :code:`DG.zbug.source` "
"window, allowing the user to set or unset breakpoints there."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:163
msgid "Stack"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:165
msgid ""
"This window provides a stack trace for the currently selected thread. "
"Clicking on any function name in the stack trace will take you to the "
"source code for that function (if available)."
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:170
msgid "Threads"
msgstr ""

#: ../../source/DebuggingGuide/zbug.rst:172
msgid ""
"All threads found in the current application will be listed here and "
"clicking on any one will open up its current stack trace into the "
":ref:`DG.zbug.stack` window."
msgstr ""

