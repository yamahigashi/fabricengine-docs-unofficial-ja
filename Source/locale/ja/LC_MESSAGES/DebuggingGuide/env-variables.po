#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/DebuggingGuide/env-variables.rst:4
msgid "Environment Variables"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:6
msgid ""
"There are certain environment variables that can affect how Fabric "
"behaves. These are not **all** officially supported."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:9
msgid "Fabric Core"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:12
msgid "FABRIC_CUDA_LOG"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:14
msgid ""
"If set, the Core will output verbose logging info whenever a KL operator "
"is passed into the CUDA codegen. In addition it will output cuda.ll and "
"cuda.ptx files containing the IR and PTX of the last KL operator into the"
" current directory. In order to ensure that the CUDA operator is actually"
" compiled this flag also causes the Core to bypass the cache for GPU "
"operators only."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:17
msgid "FABRIC_COUNT_HEAP_USE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:19
msgid ""
"If non-zero this will enable use of the KL function 'klHeapInUse()' to "
"retrieve the number of bytes of memory currently allocated on the heap in"
" KL."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:22
msgid "FABRIC_DEBUG"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:24
msgid ""
"This controls whether or not debug info will be output into compiled KL "
"code and can take the following values:"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:26
msgid ""
"1 (the default): The Core will output Dwarf debug info into all compiled "
"KL code, allowing code debugging with gdb, lldb or tools based on either."
" This debug info is also consumed by other KL features such as KL stack "
"traces for KL exceptions and in the crash handler."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:28
msgid ""
"2: The same will occur but the Core will also open a control port that "
"will accept connections from our zBug debugger front-end to provide "
"additional debug data such as KL source code. Note that the zBug debugger"
" is currently only supported on Linux."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:30
msgid ""
"0: There is no debug info output into compiled KL code. There should be "
"no reason to use this value unless errors are found in the KL debug info "
"generation that require disabling it temporarily."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:33
msgid "FABRIC_ENABLE_CRASH_HANDLER"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:35
msgid ""
"When greater than zero, the Core will attempt to catch anything that "
"would normally cause the process to crash and exit (such as a SIGSEGV on "
"Linux or an Access Violation on Windows) in order to provide a stack "
"trace including KL symbols before exiting. If the crash occurs within KL,"
" the crash handler will attempt to use information from LLVM to determine"
" any KL symbol names in the stack trace where possible. If combined with "
"FABRIC_DEBUG above, the crash handler will use the debug info to resolve "
"all KL symbols in the stack trace. The crash handler is currently "
"unsupported on OSX."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:38
msgid "FABRIC_EXTS_PATH"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:40
msgid ""
"Specifies a list of folders separated by \":\" (on POSIX) or \";\" (on "
"Windows) where the Core should search for extensions."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:43
msgid "FABRIC_FEATURE_CUDA_COMPUTE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:45
msgid ""
"If non-zero this will cause the Fabric Core to attempt to load the CUDA "
"and NVVM dynamic libraries on systems with supported Nvidia hardware in "
"order to enable GPU compute. The libraries must be available in default "
"system library paths or provided via the PATH environment variable on "
"Windows or LD_LIBRARY_PATH on Linux. Error information will be printed to"
" the console if the Core is unable to bind to the CUDA libraries when "
"this variable is set."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:48
#: ../../source/DebuggingGuide/env-variables.rst:50
msgid "FABRIC_GPU_HEAP_SIZE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:53
msgid ""
"Size (in MBytes) of the heap used by the GPU. Its default value is 16MB. "
"We currently limit it to a maximum of 1024MB."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:56
#: ../../source/DebuggingGuide/env-variables.rst:58
msgid "FABRIC_GUARDED_GPU"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:61
msgid ""
"If non-zero this will enable compiling GPU KL code in guarded mode. By "
"default this is disabled even if normally compiling code in guarded mode "
"as it slows down GPU compilation considerably, however it can be enabled "
"explicitly in cases where extra debuggability of GPU code is required."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:64
#: ../../source/DebuggingGuide/env-variables.rst:66
msgid "FABRIC_CACHE_DIR"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:69
msgid ""
"This specifies the folder where cached KL code should be stored (LLVM IR,"
" object code and potentially CUDA PTX). The defaults for these are:"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:71
msgid "Linux/OSX:"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:73
msgid "~/.fabric-engine/.private"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:75
msgid "Windows:"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:77
msgid "%APPDATA%\\\\Fabric Engine\\\\.private"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:80
#: ../../source/DebuggingGuide/env-variables.rst:82
msgid "FABRIC_CACHE_MAX_AGE_DAYS"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:85
msgid ""
"This specifies the maximum age, in days, of cached KL code that should be"
" stored (LLVM IR, object code and potentially CUDA PTX).  The age is "
"computed based on the last time the cache file was accessed.  The default"
" is 30 days."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:92
#: ../../source/DebuggingGuide/env-variables.rst:94
msgid "FABRIC_CACHE_MAX_SIZE_MB"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:97
msgid ""
"This specifies the maximum amount, in megabytes, of cached KL code that "
"should be stored (LLVM IR, object code and potentially CUDA PTX). The "
"default is 4096 megabytes."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:104
msgid "FABRIC_KL_ERROR_TRACE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:106
msgid ""
"Setting this to zero tells the Core to not output a KL stack trace "
"whenever a KL exception is encountered (either a KL throw(), setError(), "
"or dumpstack()). The only reason to disable this would be to work around "
"any errors found in the stack generation code."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:109
msgid "FABRIC_KL_HEAP_DEBUG and FABRIC_MEMORY_DEBUG"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:111
msgid ""
"Setting these to different non-zero values prints different types of "
"detailed internal memory allocation information to the console. This "
"information isn't intended for users and is probably not useful to them."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:114
msgid "FABRIC_LOAD_ALL_EXTS"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:116
msgid ""
"When set to a non-zero value the Fabric Core will bypass the normal "
"extensions mechanism of registering an extension's location on startup "
"but only loading each extension when requested and will instead "
"immediately load all extensions that it encounters at startup."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:119
msgid "FABRIC_LOG_FILE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:121
msgid ""
"If set, the Core will synchronously log all output to the specified log "
"file. This includes everything that the Core normally outputs to the "
"console such as errors and report() statements."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:125
msgid "FABRIC_LOG_LEVEL"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:127
msgid ""
"If set the Core will output log messages only at the specified level or "
"below. The default log level is 3, at log level 4 some additional debug "
"information will also be displayed."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:130
msgid "FABRIC_NO_INLINE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:132
msgid ""
"Specifies that the Core should not inline KL functions explicitly marked "
"as 'inline'. This is useful only for testing purposes."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:135
msgid "FABRIC_OPT_TYPE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:137
msgid ""
"When specified, KL code optimization will depend on the value of this "
"variable. The values used here are the same as those specified in "
"FabricCore.h:"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:139
msgid ""
"0: KL code will first be compiled unoptimized so that it's usable "
"immediately. Optimization will occur on background threads and optimized "
"code will be swapped in to replace the unoptimized code as it becomes "
"ready."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:141
msgid ""
"1: KL code will be optimized synchronously on the main thread before "
"being compiled. Startup will take longer in this case and unoptimized "
"code will never be run."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:143
msgid ""
"2: KL code will not be optimized. This can be useful when combined with "
"FABRIC_DEBUG in order to ensure that all KL function calls exist in the "
"resulting machine code."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:145
msgid ""
"This value does not apply for the KL tool, which has its own command-line"
" options to control this."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:148
msgid "FABRIC_TRACE_OPERATORS"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:150
msgid ""
"When greater than zero all operators in KL print an ENTER/LEAVE pair to "
"the console when entering and when leaving the function. This was "
"primarily used in debugging as a coarse means of pinpointing which "
"operator is responsible for a given crash but is becoming less important "
"now that proper debug info exists."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:153
msgid "FABRIC_VERBOSE_IR_CACHE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:155
msgid ""
"If non-zero, the Core will output additional information into the IR "
"cache. It will output the source KL, the unoptimized IR for the given KL,"
" and finally the optimized IR once optimization is complete. The files "
"are named by cache key as with the existing cache files."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:158
msgid "FABRIC_USE_LEGACY_EXT_SHLIBS"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:160
msgid ""
"In older versions of Fabric, in addition to looking for "
"LIBNAME-<os>-<arch>.DLL when trying to load shared libraries for "
"extensions, Fabric would also try to load LIBNAME.DLL and LIBNAME.  "
"Setting `FABRIC_USE_LEGACY_EXT_SHLIBS` to 1 re-enables this behaviour."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:163
msgid "Fabric Canvas"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:166
msgid "FABRIC_DFG_PATH"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:168
msgid ""
"A colon-separated (semicolon on Windows) path of additional directories "
"to search for Canvas presets."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:171
msgid "FABRIC_CANVAS_JSON_STRICT"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:173
msgid ""
"Setting this variable to 1 will cause Canvas to export its JSON "
"representations for graphs and functions using a strict JSON format; by "
"default, Fabric will export using a loose format where newlines and other"
" control characters will not be escaped.  This loose format is better for"
" version control but not compatible with strict JSON parsers."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:176
msgid "FABRIC_NO_EXPIRY_DIALOG"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:178
msgid ""
"Normally when canvas loads it will pop a warning window if the user's "
"license expires in less than a month. Setting this variable to 1 will "
"cause Canvas to skip this window and instead print the warning to the "
"command line."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:181
msgid "Fabric for Maya"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:184
#: ../../source/DebuggingGuide/env-variables.rst:194
msgid "FABRIC_DISABLE_CLIENT_PERSISTENCE"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:186
#: ../../source/DebuggingGuide/env-variables.rst:196
msgid "Setting this variable will disable the persistence of the Fabric client."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:188
#: ../../source/DebuggingGuide/env-variables.rst:198
msgid "Note: by default the Fabric client is persisted between scenes."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:191
msgid "Fabric for Modo"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:201
msgid "SPLICE API"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:204
msgid "FABRIC_NODES_PATH"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:206
msgid ""
"This is used by the SpliceAPI to resolve file paths. If a file path is "
"provided as a relative path to any of the splice commands, it will try to"
" resolve the filePath based on the list of directories in the "
"FABRIC_NODES_PATH. You can separate directories using a semicolon or a "
"colon."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:209
msgid "FABRIC_SPLICE_DISABLE_LOG"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:211
msgid ""
"If non-zero this will disable printing of ordinary (\"info\") log "
"messages from the Fabric DCC plugins.  This does not apply to warning and"
" error messages, and does not apply to Fabric Canvas messages of any sort"
" (which use the usual Fabric Core logging mechanism)."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:214
msgid "FABRIC_SPLICE_UNGUARDED"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:216
msgid ""
"If non-zero then KL code will be compiled and run in \"unguarded\" mode, "
"meaning that array out-of-bounds accesses and object NULL pointer "
"references will not be checked. This allows for faster code at the "
"expense of potential crashes on programmer error in the KL code."
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:219
msgid "Fabric Licensing"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:222
msgid "FABRIC_LICENSE_DIR"
msgstr ""

#: ../../source/DebuggingGuide/env-variables.rst:224
msgid ""
"Specifies the folder that Fabric will use to search for node-locked .lic "
"license files."
msgstr ""

#~ msgid ""
#~ "This specifies the maximum amount, in"
#~ " megabytes, of cached KL code that"
#~ " should be stored (LLVM IR, object"
#~ " code and potentially CUDA PTX). The"
#~ " default is 250 megabytes."
#~ msgstr ""

