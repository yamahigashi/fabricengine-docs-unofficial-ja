#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/KLProgrammingGuide/globals.rst:4
msgid "Functions and Other Global Declarations"
msgstr "関数と他のグローバルな宣言"

#: ../../source/KLProgrammingGuide/globals.rst:6
msgid ""
"In this chapter we detail the different entities that can appear in the "
"global scope of a KL program, including functions and function-like "
"entities, name constants, and instances of the ``require`` statement.  "
"Structure and object definitions can also appear in the global scope and "
"are covered in the section :ref:`KLPG.types`."
msgstr ""
"この章では、KLプログラムのグローバルスコープの中で現れる、関数や関数ライクなエンティティ、名前定数、そして ``require`` "
"ステートメントのインスタンスを含む、それぞれのエンティティの詳細について触れていきます。構造体とオブジェクトの定義もグローバルスコープの中に現れます。そしてこれらについては、"
" :ref:`KLPG.types` 節で触れていきます。"

#: ../../source/KLProgrammingGuide/globals.rst:14
msgid "Functions"
msgstr "関数"

#: ../../source/KLProgrammingGuide/globals.rst:16
msgid ""
"A function is a collection of program statements that can be called from "
"another part of a program.  A function takes a list of zero or more "
":dfn:`parameters` and optionally returns a :dfn:`return value`."
msgstr ""
"関数はプログラムの他の部分から呼ばれるプログラム文の集まりです。関数はゼロまたはそれ以上の :dfn:`parameters` "
"のリストを受け取り、オプションとして、 :dfn:`return value` を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:22
msgid "Function Definitions"
msgstr "関数定義"

#: ../../source/KLProgrammingGuide/globals.rst:24
msgid ""
"Function definitions in KL are much the same as the \"traditional\" "
"function definition syntax in JavaScript, with the following key "
"differences:"
msgstr "KLにおける関数定義は、JavaScriptにおける \"伝統的な\" 関数定義の文法とほとんど同じです。次の重要な違いを除いて："

#: ../../source/KLProgrammingGuide/globals.rst:26
msgid ""
"The return type and the type of each function parameter must be "
"explicitly declared.  If a function does not return a value, the return "
"type must be omitted."
msgstr "戻り値の型と関数の各パラメーターの型は明示的に宣言しなければなりません。もし関数が値を返さないのなら、戻り値の型の指定は取り除く必要があります。"

#: ../../source/KLProgrammingGuide/globals.rst:28
msgid ""
"The parameter declarations may additionally declare the parameter as "
"input (read-only; the default) by preceding the type by ``in`` or input-"
"output (read-write) by preceding the value by ``io``."
msgstr ""
"パラメーター宣言では、追加的に、``in`` を前につけることで、入力(読み込みのみ：デフォルトです)パラメーターとして、または、 ``io`` "
"を前につけることで、入出力（読み書き）パラメーターとして宣言することができます。"

#: ../../source/KLProgrammingGuide/globals.rst:30
msgid ""
"Functions can optionally be defined using the ``inline`` keyword in place"
" of ``function``; see :ref:`inline`."
msgstr ""
"関数はオプションとして ``function`` の代わりに ``inline`` キーワードを使って定義することができます。詳細は "
":ref:`inline` を見てください。"

#: ../../source/KLProgrammingGuide/globals.rst:32
msgid ""
"The ``function`` keyword is optional.  If neither ``function`` nor "
"``inline`` is present then ``function`` is assumed."
msgstr ""
"``function`` キーワードはオプションです。もし ``function`` や ``inline`` "
"が指定されなかった場合は、``function`` が指定されたとみなされます。"

#: ../../source/KLProgrammingGuide/globals.rst:69
msgid "Function Invocations"
msgstr "関数呼び出し"

#: ../../source/KLProgrammingGuide/globals.rst:71
msgid ""
"Function invocations (\"calls\") are made using the same syntax as "
"JavaScript, namely by appending a comma-delimited list of arguments, "
"surrounded by parentheses, to the function name."
msgstr "関数呼び出し（\"コール\"）はJavaScriptと同じ文法で作られています。すなわち、関数名に対してコンマ区切りの引数リストを加え、丸カッコで囲みます。"

#: ../../source/KLProgrammingGuide/globals.rst:87
msgid "Function Prototypes"
msgstr "関数プロトタイプ"

#: ../../source/KLProgrammingGuide/globals.rst:89
msgid ""
"A :dfn:`function prototype` in KL is a function declaration that is "
"missing a body.  Providing a function prototype allows the function to be"
" called before it is defined.  This is useful under two circumstances:"
msgstr ""
"KLにおける :dfn:`function prototype` "
"はボディ（関数本体）のない関数宣言です。関数プロトタイプを使うことで、関数の定義より前の位置から、その関数を呼び出すことができます。"

#: ../../source/KLProgrammingGuide/globals.rst:91
msgid ""
"When two or more functions call each other.  Such functions are sometimes"
" referred to as :dfn:`co-recursive`:"
msgstr "二つもしくはそれ以上の関数が互いを呼ぶとき、そのような関数は :dfn:`co-recursive` と呼ばれることがあります："

#: ../../source/KLProgrammingGuide/globals.rst:116
msgid ""
"When a function definition is provided by a Fabric extension.  The name "
"of the symbol of the function in the Fabric extension is provided by "
"appending :samp:`= \"{symbol name}\"` or :samp:`= '{symbol name}'` to the"
" function prototype.  These is usually referred to as :defn:`external "
"functions`:"
msgstr ""
"関数定義がFabricエクステンションから与えられたものだった場合、そのFabricエクステンション内の関数のシンボル名は、関数プロトタイプに "
":samp:`= \"{symbol name}\"` または :samp:`= '{symbol name}'` "
"を追加したものになります。これらは通常、 :dfn:`external functions`: と呼ばれます。"

#: ../../source/KLProgrammingGuide/globals.rst:141
msgid "Polymorphism"
msgstr "ポリモーフィズム"

#: ../../source/KLProgrammingGuide/globals.rst:143
msgid ""
"KL supports :dfn:`compile-time function polymorphism`.  This means that "
"you can have multiple functions with the same name so long as they have a"
" different number of parameters or those parameters differ by type and/or"
" their input versus input-output qualification."
msgstr ""
"KLは :dfn:`compile-time function polymorphism` "
"をサポートしています。これは、関数のパラメーターの数が異なるか、または、これらのパラメーターで型やin/ioの修飾が異なる場合に限り、同じ名前の複数の関数を持つことができる、というものです。"

#: ../../source/KLProgrammingGuide/globals.rst:145
msgid ""
"It is an error to have two functions with the same name that take exactly"
" the same parameter types but return different types"
msgstr "全く同じ型のパラメータ群を持つ同じ名前の関数を２つ持とうとするとエラーになります（異なる型を返していたとしてもです）。"

#: ../../source/KLProgrammingGuide/globals.rst:147
msgid ""
"When a function call is made in KL source, if there are multiple "
"functions with the same name then the KL compiler uses a best-match "
"system to determine which function to call.  Exact parameter type matches"
" are always prioritized over type casts.  If the compiler is unable to "
"choose a unique best match then an error will be reported showing the "
"ambiguity."
msgstr "関数呼び出しがKLソース内で書かれていた時に、もし同じ名前の複数の関数が存在していたら、その時はKLコンパイラはどの関数を呼び出すべきか決めるためにベストマッチ・システムを使用します。厳格なパラメーターの型のマッチング（訳者注：暗黙のキャストなどを伴わずに、互いに全く同じ型であると判別すること）は常に型キャストより優先して行われます。もしコンパイラが唯一の最適な関数を選べなかった場合は、多義性（曖昧さ）を示すエラーを報告します。"

#: ../../source/KLProgrammingGuide/globals.rst:149
msgid "The following example demonstrates a simple use of function polymorphism:"
msgstr "次の例は、関数ポリモーフィズムの一つの使用例を示すものです。"

#: ../../source/KLProgrammingGuide/globals.rst:178
msgid "Operators"
msgstr "演算子"

#: ../../source/KLProgrammingGuide/globals.rst:180
msgid ""
"The ``operator`` keyword in KL is used to mark functions that are to be "
"used as entry points into KL from the Fabric dependency graph.  Operators"
" are declared in the same way as functions except that they must not "
"return a value.  Fabric does special type-checking to ensure that "
"operators are bound properly to nodes in a Fabric dependency graph."
msgstr ""
"KLにおける ``operator`` "
"キーワードは、関数がFabricディペンデンシー・グラフからKLへのエントリーポイントとして使われるように、その関数をマークするために使用されます。"

#: ../../source/KLProgrammingGuide/globals.rst:194
msgid "Constructors"
msgstr "コンストラクタ"

#: ../../source/KLProgrammingGuide/globals.rst:196
msgid ""
"A :dfn:`constructor` for a user-defined type is a function that "
"initializes a value with the given the type from other values."
msgstr "ユーザー定義の型の :dfn:`constructor` は他の値から、ユーザーが定義した型の値を初期化する関数です。"

#: ../../source/KLProgrammingGuide/globals.rst:202
msgid "Constructor Declarations"
msgstr "コンストラクタ宣言"

#: ../../source/KLProgrammingGuide/globals.rst:204
msgid ""
"A constructor is declared as a function whose name is the name of the "
"user-defined type.  The function can take any number of parameters, all "
"of which must be input parameters; constructors cannot take input-output "
"parameters.  Constructors cannot return values."
msgstr "コンストラクタは、ユーザー定義の型と同じ名前の関数として宣言されます。このコンストラクタ関数は任意の個数のパラメーターを取ることができます。ただし、入力パラメーターである必要があります。コンストラクターは入出力パラメーターは取ることができません。また、コンストラクターは値を返せません。"

#: ../../source/KLProgrammingGuide/globals.rst:206
msgid ""
"Within the body of a constructor definition, the value being initialized "
"is referred to with the ``this`` keyword; its members are accessed using "
"the ``.`` (dot) operator.  In this context, ``this`` is always read-"
"write, ie. its members can be modified."
msgstr ""
"コンストラクタ定義の本体の中では、初期化される値は、 ``this`` キーワードによって参照できます。そのメンバーには ``.`` "
"(ドット）演算子を使うことでアクセスできます。このコンテキストにおいて、 ``this`` "
"は常に読み書き可能です。つまり、メンバーは変更できます。"

#: ../../source/KLProgrammingGuide/globals.rst:238
msgid ""
"Like functions, constructors can optionally be defined using the "
"``inline`` keyword in place of ``function``; see :ref:`inline`."
msgstr ""
"関数のように、コンストラクタはオプションで ``function`` の代わりに ``inline`` を使って定義することができます。詳しくは "
":ref:`inline` を参照してください。"

#: ../../source/KLProgrammingGuide/globals.rst:244
msgid "Constructor Invocation"
msgstr "コンストラクタ呼び出し"

#: ../../source/KLProgrammingGuide/globals.rst:246
msgid "Constructors are invoked in one of several ways."
msgstr "コンストラクタの呼び出し方はいくつかあります。"

#: ../../source/KLProgrammingGuide/globals.rst:249
msgid "Naked Initialization"
msgstr "裸の初期化"

#: ../../source/KLProgrammingGuide/globals.rst:251
msgid ""
"If a variable is declared without any initialization, the :dfn:`empty "
"constructor` (ie. the constructor that takes no parameters) is invoked to"
" initialize the variable.  This is referred to as :dfn:`naked "
"initialization`."
msgstr ""
"ある変数が何の初期化もなしに宣言されたとしたら、 :dfn:`empty constructor` "
"（つまり、何のパラメーターも取らないコンストラクタ）がその変数を初期化するために呼び出されます。これを :dfn:`naked "
"initialization` と呼びます。"

#: ../../source/KLProgrammingGuide/globals.rst:272
msgid "Assignment Initialization"
msgstr "代入初期化"

#: ../../source/KLProgrammingGuide/globals.rst:274
msgid ""
"If a variable is assigned to as part of its declaration, a single-"
"parameter constructor is invoked.  This is referred to as "
":dfn:`assignment initialization`.  If there isn't an exact match for the "
"type of the value assigned, best-match polymorphism rules are used to "
"choose the constructor to invoke."
msgstr ""
"もし、（ある型の初期化時に、）それと同じ型の変数が宣言の一部として代入されていた場合、単一パラメーターコンストラクタが呼び出されます。これは "
":dfn:`assignment initialization` "
"と呼ばれます。もし、割り当てられた値の型にぴったりマッチするコンストラクタがなければ、呼び出すべきコンストラクタを選ぶために、ベスト・マッチ・ポリモーフィズムルールが適用されます。"

#: ../../source/KLProgrammingGuide/globals.rst:276
#: ../../source/KLProgrammingGuide/globals.rst:356
msgid "Example:"
msgstr "例："

#: ../../source/KLProgrammingGuide/globals.rst:309
#: ../../source/KLProgrammingGuide/globals.rst:1507
msgid "Output:"
msgstr "出力："

#: ../../source/KLProgrammingGuide/globals.rst:318
msgid "Invocation Initialization"
msgstr "呼び出し初期化"

#: ../../source/KLProgrammingGuide/globals.rst:320
msgid ""
"If a variable is \"called\" (ie. using function call syntax) as part of "
"its declaration, the constructor taking the given arguments is invoked.  "
"This is referred to as :dfn:`invocation initialization`.  If there isn't "
"an exact match for the arguments passed to the call, best-match "
"polymorphism rules are used to choose the constructor to invoke."
msgstr ""
"もし、ある変数がその宣言の一部として "
"\"呼び出されて\"（つまり、関数呼び出しの文法を使って）いた場合、与えられた引数を取る（マッチする）コンストラクターが呼ばれます。これを "
":dfn:`invocation initialization` "
"と呼びます。もし、呼び出し時に渡された引数とぴったりマッチするコンストラクタがない場合は、呼び出すべきコンストラクタを選ぶために、ベスト・マッチ・ポリモーフィズムルールが適用されます。"

#: ../../source/KLProgrammingGuide/globals.rst:322
msgid "Example::"
msgstr "例::"

#: ../../source/KLProgrammingGuide/globals.rst:342
#: ../../source/KLProgrammingGuide/globals.rst:376
#: ../../source/KLProgrammingGuide/globals.rst:456
#: ../../source/KLProgrammingGuide/globals.rst:1410
msgid "Output::"
msgstr "出力::"

#: ../../source/KLProgrammingGuide/globals.rst:350
msgid "Temporary Initialization"
msgstr "一時初期化"

#: ../../source/KLProgrammingGuide/globals.rst:352
msgid ""
"If a function call is performed where the name of the function is the "
"name of the type, the constructor taking the given arguments is invoked "
"to create a temporary value of the named type.  If there isn't an exact "
"match for the arguments passed to the call, best-match polymorphism rules"
" are used to choose the constructor to invoke.  This is refered to as "
":dfn:`temporary initialization`."
msgstr ""
"もし関数呼び出し時の関数名が型の名前と同じだった場合、与えられた引数を取るコンストラクタは、指定された型の一時的な値を作るために呼び出されます。もし、呼び出し時に渡された引数とぴったりマッチするコンストラクタがない場合は、呼び出すべきコンストラクタを選ぶために、ベスト・マッチ・ポリモーフィズムルールが適用されます。これを"
" :dfn:`temporary initialization` と呼びます。"

#: ../../source/KLProgrammingGuide/globals.rst:354
msgid ""
"KL does not distinguish between construction and casting.  Casting a "
"value to a different type is the same as constructing a temporary value "
"of the given type and initializing it, using the appropriate constructor,"
" from the given value."
msgstr "KLはコンストラクションとキャスティングを区別しません。異なる型への値のキャストは、（与えられた値から適切なコンストラクタを選んで使用することにより、）与えられた型の一時的な値を生成して、それを初期化するのと同じです。"

#: ../../source/KLProgrammingGuide/globals.rst:382
msgid "Base type constructors (inheritance)"
msgstr "基底型のコンストラクタ（継承）"

#: ../../source/KLProgrammingGuide/globals.rst:386
msgid ""
"When a specialized structure or object type :ref:`inherits "
"<KPLG.object.inheritance>` from a base type, the base type's default "
"constructor is implicitly called before the specialized type's one."
msgstr ""
"特殊化された構造体またはオブジェクト型が基底型から :ref:`inherits <KPLG.object.inheritance>` "
"するとき、特殊化された型のコンストラクタより前に、基底型のデフォルトコンストラクタが暗黙的に呼び出されます。"

#: ../../source/KLProgrammingGuide/globals.rst:390
msgid ""
"It is a current limitation that base type constructors with arguments "
"cannot be called by specialized type constructors. The following example "
"uses an `initialize` method to workaround this issue:"
msgstr ""
"現時点での制約として、特殊化した型のコンストラクタから、引数を伴って基底クラスのコンストラクタを呼び出すことはできません。次の例では、この問題の回避策として"
" `initialize` メソッドを使っています。"

#: ../../source/KLProgrammingGuide/globals.rst:429
msgid "Destructors"
msgstr "デストラクタ"

#: ../../source/KLProgrammingGuide/globals.rst:431
msgid ""
"A destructor is a function that is called when a variable goes out of "
"scope and its resources are freed.  Destructors are declared by "
"prepending ``~`` (tilde) in front of the name of the type and using it as"
" a function.  Destructors cannot take any parameters or return values.  "
"The destructor is called before the value is freed so that its members "
"are still accessible.  In the body of the destructor the value is "
"referred to using the ``this`` keyword; the value is input-output, ie. it"
" can be modified in the destructor."
msgstr ""
"デストラクタは変数がスコープの外に出て、そのリソースを解放するときに呼ばれる関数です。デストラクタは型の名前の前に ``~`` "
"（チルダ）をつけ、また関数として使われるように宣言されます。デストラクタはどのようなパラメーターも取らず、戻り値も返しません。デストラクタは値が解放される前に呼ばれます。したがって、そのメンバーにはまだアクセスすることができます。デストラクタの本体では、そうしたメンバーの値には"
" ``this`` キーワードを使って参照します。また、それらの値は入出力可能なので、つまりはデストラクタで書き換え可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:433
msgid "Example use of destructor:"
msgstr "デストラクタの使用例"

#: ../../source/KLProgrammingGuide/globals.rst:461
msgid ""
"Like functions, destructors can optionally be defined using the "
"``inline`` keyword in place   of ``function``; see :ref:`inline`."
msgstr ""
"関数のように、デストラクタはオプションとして ``function`` の代わりに ``inline`` キーワードを使って定義できます。詳細は "
":ref:`inline` を見てください。"

#: ../../source/KLProgrammingGuide/globals.rst:464
msgid ""
"When a specialized structure or object type :ref:`inherits "
"<KPLG.object.inheritance>` from a base type, base type's destructor is "
"called after the specialized one."
msgstr "特殊化された構造体またはオブジェクト型が基底型を継承するとき、基底型のデストラクタは特殊化した後に呼び出されます。"

#: ../../source/KLProgrammingGuide/globals.rst:472
msgid "Methods"
msgstr "メソッド"

#: ../../source/KLProgrammingGuide/globals.rst:474
msgid ""
"A :dfn:`method` is a function that operates on a user-defined structure."
"  It uses a slightly different (and more suggestive) syntax than plain "
"function calls for the case that the method call is strongly tied to a "
"value whose type is a user-defined structure."
msgstr ""
":dfn:`method` "
"はユーザー定義の構造体上で操作を行う関数です。メソッドは、普通の関数呼び出しよりもわずかに異なる（そしてより示唆的な）文法を使います。これは、メソッドコールがユーザー定義の構造体を型として持つ値に強く結びつけられていることによります。"

#: ../../source/KLProgrammingGuide/globals.rst:480
msgid "Method Definitions"
msgstr "メソッド定義"

#: ../../source/KLProgrammingGuide/globals.rst:482
msgid ""
"If :samp:`{Type}` is a structure or alias, then a method named "
":samp:`{methodName}` can be added to the type using the following syntax:"
msgstr ""
"もし :samp:`{Type}` が構造体かエイリアスだった場合、 :samp:`{methodName}` "
"と名付けられたメソッドは次の文法を使うことで、型に加えることができます。"

#: ../../source/KLProgrammingGuide/globals.rst:496
msgid ""
"Within the method body, ``this`` refers to the value on which the method "
"is called.  ``this`` is read-only if the method returns a value and is "
"read-write if the method does not return a value."
msgstr ""
"メソッド本体内で、 ``this`` はそのメソッドが呼ばれた値を参照します。``this`` "
"は、もしそのメソッドが値を返すのであれば、読み込みのみ可能です。もし、値を返さないのであれば、読み書きが可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:498
msgid ""
"Like functions, methods can optionally be defined using the ``inline`` "
"keyword in place   of ``function``; see :ref:`inline`."
msgstr ""
"関数のように、メソッドはオプションとして ``function`` キーワードの代わりに ``inline`` "
"を使って定義することができます。詳細は :ref:`inline` をご覧ください。"

#: ../../source/KLProgrammingGuide/globals.rst:505
msgid "Method Invocation"
msgstr "メソッド呼び出し"

#: ../../source/KLProgrammingGuide/globals.rst:507
msgid ""
"If :samp:`{value}` is a value of type :samp:`{Type}` then the method "
":samp:`{methodName}` can be invoked on :samp:`{value}` using the "
"expression :samp:`{value}.{methodName}({argument list})`."
msgstr ""
"もし :samp:`{value}` が :samp:`{Type}` 型の値であるなら、そのメソッド :samp:`{methodName}` "
"は :samp:`{value}.{methodName}({argument list})` という書き方を使って、 "
":samp:`{value}` 上で呼び出すことができます。"

#: ../../source/KLProgrammingGuide/globals.rst:509
msgid ""
"Just as there can be multiple functions with the same name, a given type "
"can have multiple methods with the same name.  When deciding which method"
" to invoke, the usual best-match rules apply."
msgstr "同名な関数を複数を置くことが可能であるので、指定されたある型は同名の複数の関数を持つことが可能です。どのメソッドを実際に呼び出すかを決定するには、通常の最適ルールが適用されます。"

#: ../../source/KLProgrammingGuide/globals.rst:511
msgid "Example of method definition and invocation:"
msgstr "メソッド定義と呼び出しの例"

#: ../../source/KLProgrammingGuide/globals.rst:536
msgid "Methods Taking Read-Only or Read-Write Values for ``this``"
msgstr "メソッドにおける ``this`` の Read-Only・Read-Write な値としての扱い"

#: ../../source/KLProgrammingGuide/globals.rst:538
msgid ""
":code:`this` now always defaults to read-only in method definitions "
"unless an explicit :code:`!` is specified after method name; the default "
"no longer depends on whether the method returns a value."
msgstr ""
":code:`this` は今後、以下の条件 ―メソッド定義においてメソッド名の後ろに明示的に  :code:`!`  を後置しない限り― "
"以外であれば常にディフォルトで read-only となります。もはやディフォルトはメソッドが値を返すかどうかに依存することはありません。"

#: ../../source/KLProgrammingGuide/globals.rst:541
msgid ""
"Whether :code:`this` is read-only or read-write (in compiler terms, an "
"r-value or an l-value) can be controlled on a per-method basis.  By "
"default, :code:`this` is read-only; :code:`this` can be made read-write "
"by suffixing the method name with ``!`` (exclamation mark).  The method "
"name can be suffixed with :code:`?` (question mark) to explicitly mark "
"read-only methods."
msgstr ""
":code:`this` が read-only か read-write (コンパイラ用語では, r-value あるいは l-value) "
"かどうかは、メソッド単位で制御することができます。ディフォルトでは :code:`this` は read-only; メソッド名に ``!`` "
"(エクスクラメーションびっくりマーク) を接尾すると read-write; メソッド名に :code:`?` "
"(クエスチョンマーク)を接尾すると明示的な read-only となります。"

#: ../../source/KLProgrammingGuide/globals.rst:543
msgid "Example of explicit read-only or read-write :code:`this` in methods:"
msgstr "メソッド内の  :code:`this` の明示的な read-only・read-write 使用例"

#: ../../source/KLProgrammingGuide/globals.rst:597
msgid "Interface methods and inheritance"
msgstr "インターフェイスメソッドと継承"

#: ../../source/KLProgrammingGuide/globals.rst:601
msgid ""
"Although it is usually transparent to the KL coder, interface method's "
"calling mechanism differs from usual methods, and this requires special "
"care in some situations."
msgstr "KLコーダにとっては自明なことではありますが、インターフェイスメソッドの呼び出しメカニズムは通常のメソッドとは異なり、ゆえに特定の状況では特に注意を必要とします。"

#: ../../source/KLProgrammingGuide/globals.rst:603
msgid ""
"A specialized object can inherit from a :ref:`base object type "
"<KPLG.object.inheritance>`. If that base type implements an interface, "
"the specialized object can provide its own implementation of the same "
"interface methods. In that case, invoking the interface method will "
"always call the specialized version of the method (the specialized object"
" method `overrides` the base object method). This is always true, and it "
"doesn't matter if the method is called in the context of functions, "
"specialized object's methods, or base object's method."
msgstr ""
"特殊化したオブジェクトは、 :ref:`基底となるオブジェクト型 <KPLG.object.inheritance>` "
"を継承することができます。この基底型がインタフェースを実装している場合、特殊化したオブジェクトではさらに同じインタフェースのメソッドを独自に実装することができます。このような場合では、インタフェースメソッドの呼び出しは常に特殊化したバージョンのメソッドが呼びだされます。（つまり特殊化したオブジェクトのメソッドが基底オブジェクトのメソッドを"
" `overrides` "
"した）これは常にこの通りになります。メソッド呼び出しが、関数コンテキストでおこなわれようと特殊化したオブジェクトのメソッドであろうと、基本オブジェクトのメソッドであろうと関係ありません。"

#: ../../source/KLProgrammingGuide/globals.rst:605
msgid ""
"However, it is frequent that the specialized implementation of a method "
"needs to invoke its base implementation. The "
":samp:`{Type}.parent.{methodName}` syntax allows a specialized class to "
"invoke the base implementation of an interface method, as seen below:"
msgstr ""
"ただし、特殊化したメソッドの実装において、基底の実装を呼び出す必要が有ることはよくあります。 "
":samp:`{Type}.parent.{methodName}` "
"記法により、特殊化クラスが基底のインタフェースメソッド実装を呼び出すことができます。以下のとおり:"

#: ../../source/KLProgrammingGuide/globals.rst:647
msgid "Access to Methods"
msgstr "メソッドへのアクセス"

#: ../../source/KLProgrammingGuide/globals.rst:651
msgid ""
"Access to methods can be controlled in the same was as :ref:`access to "
"members <KLPG.types.structs.member-access>` using the ``public``, "
"``private`` and ``protected`` keywords:"
msgstr ""
"メソッドへのアクセスは :ref:`メンバへのアクセス <KLPG.types.structs.member-access>` 同様 "
"``public``, ``private``, ``protected`` キーワードにより制御可能です:"

#: ../../source/KLProgrammingGuide/globals.rst:714
msgid "Overloaded Operators"
msgstr "演算子オーバロード"

#: ../../source/KLProgrammingGuide/globals.rst:716
msgid ""
"KL allows overloading of binary operators and compound assignment "
"operators for custom types (ie. specified through ``struct``)."
msgstr "KLでは独自のカスタム型（例えば ``struct`` ）用に２項演算子や、複合代入演算子をオーバロードすることができます。"

#: ../../source/KLProgrammingGuide/globals.rst:718
msgid ""
"Like functions, operator overloads can optionally be defined using the "
"``inline`` keyword in place   of ``function``; see :ref:`inline`."
msgstr ""
"関数とおなじく、演算子オーバロードも ``inline`` キーワードを  ``function`` の箇所に付して定義することも可能です。  "
":ref:`inline` 参照"

#: ../../source/KLProgrammingGuide/globals.rst:725
msgid "Binary Operator Overloads"
msgstr "二項演算子のオーバロード"

#: ../../source/KLProgrammingGuide/globals.rst:727
msgid "Binary operators can be overloaded using the following syntax:"
msgstr "二項演算子のオーバロードには以下の文法に従います:"

#: ../../source/KLProgrammingGuide/globals.rst:749
msgid ""
"Any of the binary arithmetic (``+``, ``-``, ``*``, ``/`` and ``%``), "
"bitwise (``|``, ``&``, ``^``, ``<<`` and ``>>``) and comparison (``==``, "
"``!=``, ``<``, ``<=``, ``>`` and ``>=``) operators can be overloaded."
msgstr ""
"どの二項演算子、算術演算子 (``+``, ``-``, ``*``, ``/``, ``%``), ビット演算子 (``|``, ``&``, "
"``^``, ``<<`` and ``>>``) 比較演算子 (``==``, ``!=``, ``<``, ``<=``, ``>`` and"
" ``>=``) もオーバロード可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:751
msgid "Binary operator overloads are subject to the following restrictions:"
msgstr "二項演算子のオーバロードには以下の制限があります:"

#: ../../source/KLProgrammingGuide/globals.rst:753
msgid ""
"They must take exactly two parameters.  The two parameters may be of any "
"type and the two types may be different but they must both be input-only "
"parameters."
msgstr ""
"パラメータを『２つ』とります。この２つのパラメータは、どのような型でも可能であり、互いに異なる型でもよいですが、双方 input-only "
"のパラメータである必要があります。"

#: ../../source/KLProgrammingGuide/globals.rst:755
#: ../../source/KLProgrammingGuide/globals.rst:793
msgid "They must return a value.  However, the return type can be any type."
msgstr "値を返します。ただし返り値の型は問いません。"

#: ../../source/KLProgrammingGuide/globals.rst:763
#: ../../source/KLProgrammingGuide/globals.rst:765
msgid "Unary Operator Overloads"
msgstr "単項演算子のオーバロード"

#: ../../source/KLProgrammingGuide/globals.rst:768
msgid "Unary operators can be overloaded using the following syntax:"
msgstr "単項演算子のオーバーロードは以下の文法に従います:"

#: ../../source/KLProgrammingGuide/globals.rst:789
msgid "Only the unary operators ``+``, ``-`` and ``~`` can be overloaded."
msgstr "単項演算子は  ``+``, ``-``, ``~`` のみオーバロード可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:791
msgid "Unary operator overloads are subject to the following restrictions:"
msgstr "単項演算子のオーバーロードには以下の制限があります:"

#: ../../source/KLProgrammingGuide/globals.rst:801
msgid "Direct Assignment Overloads"
msgstr "直接代入のオーバロード"

#: ../../source/KLProgrammingGuide/globals.rst:803
#, fuzzy
msgid ""
"KL provides a default direct assignment for custom types which simply "
"assigns each of the members.  However, it is also possible to provide an "
"overload for the direct assignment operator as shown in the example "
"below:"
msgstr "KLでは、カスタム型にディフォルトの直接代入演算子を提供します。代入の際は単純にそれぞれのメンバを代入します。ただし、直接代入演算子のオーバロードをすることも可能です。以下に例を示します:"

#: ../../source/KLProgrammingGuide/globals.rst:827
#: ../../source/KLProgrammingGuide/globals.rst:864
msgid "Compound assignment overloads are subject to the following restrictions:"
msgstr "複合代入演算子のオーバロードは以下の制限に従います:"

#: ../../source/KLProgrammingGuide/globals.rst:829
#: ../../source/KLProgrammingGuide/globals.rst:866
msgid ""
"They must take exactly one parameter.  The parameter may be of any type "
"but it must be an input-only parameter."
msgstr "『１つ』パラメータを取ります。このパラメータはどのような型でも構いません。パラメータは input-only である必要があります。"

#: ../../source/KLProgrammingGuide/globals.rst:831
#: ../../source/KLProgrammingGuide/globals.rst:868
msgid "They must not return a value."
msgstr "値を返しません。"

#: ../../source/KLProgrammingGuide/globals.rst:836
msgid "Compound Assignment Overloads"
msgstr "複合代入演算子のオーバロード"

#: ../../source/KLProgrammingGuide/globals.rst:838
msgid ""
"KL provides a default direct assignment for custom types which simply "
"assigns each of the members.  It also provides a default :dfn:`compound "
"assignment` operator (ie. ``+=``, ``-=``, ``*=``, ``/=``, ``%=``, ``|=``,"
" ``&=``, ``^=``, ``<<=`` and ``>>=``) by composing the associated binary "
"operator, if available, with an assignment."
msgstr ""
"KLでは、カスタム型にディフォルトの直接代入演算子を提供します。代入の際は単純にそれぞれのメンバを代入します。 :dfn:`compound "
"assignment` 演算子についても同様に提供します (例 ``+=``, ``-=``, ``*=``, ``/=``, ``%=``, "
"``|=``, ``&=``, ``^=``, ``<<=``, ``>>=``) 関連する二項演算子 ―利用可能であれば代入も― を作成します。"

#: ../../source/KLProgrammingGuide/globals.rst:840
msgid ""
"However, it is also possible to provide an overload for any of the "
"compound assignment operators using the following syntax::"
msgstr "ただし、複号代入演算子のオーバロードをすることも可能です。以下に例を示します:"

#: ../../source/KLProgrammingGuide/globals.rst:858
msgid "This produces the following output::"
msgstr "以下の出力を得ます::"

#: ../../source/KLProgrammingGuide/globals.rst:877
msgid "Inline Functions and Methods"
msgstr "Inline 関数,メソッド"

#: ../../source/KLProgrammingGuide/globals.rst:879
msgid ""
"Functions, methods, and so on--but not operators--can optionally be "
"declared with the ``inline`` keyword in place of the ``function`` "
"keyword, which tells KL to try to inline the function  definition "
"wherever it is used. ``inline`` should generally only be used on small "
"functions, which this may result in improved runtime performance::"
msgstr ""
"関数、メソッドなど（オペレータを除く）は宣言の際にオプションとして、 ``inline`` キーワードを ``function`` "
"キーワードの箇所に付すことができます。 ``inline`` キーワードにより、KLは使用に際し関数定義を inline 化しようとします。 "
"``inline`` は通常、小さな関数に対してのみ使用します。これにより実行時のパフォーマンスの改善を見込めます。"

#: ../../source/KLProgrammingGuide/globals.rst:893
msgid "Built-In Functions and Methods"
msgstr "組み込み関数・メソッド"

#: ../../source/KLProgrammingGuide/globals.rst:895
msgid ""
"KL has several built-in functions and methods that are available to all "
"KL programs."
msgstr "KL にはいくつかの組み込み関数・メソッドがあり、KLプログラム全てで利用可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:898
msgid "Debugging Functions"
msgstr "デバッグのための関数"

#: ../../source/KLProgrammingGuide/globals.rst:903
msgid ""
"Outputs a message to wherever messages are sent from KL; when "
"|FABRIC_PRODUCT_NAME| is used from the command line or when the KL tool "
"is used the output is sent to standard error and standard output "
"respectively.  A newline is appended to the message when it is sent."
msgstr ""
"メッセージを出力します。KLが送った場所へ出力します;  |FABRIC_PRODUCT_NAME| ― あるいは KL "
"Toolコマンドラインから使用されたのであれば、出力は標準エラー・標準出力へとそれぞれ送られます。送信時に改行がメッセージに追記されます。"

#: ../../source/KLProgrammingGuide/globals.rst:905
msgid ""
"Within |FABRIC_PRODUCT_NAME| the report function is primarily used for "
"debugging, whereas it is used for general output from the KL tool."
msgstr ""
"|FABRIC_PRODUCT_NAME| では report関数は、主にデバッグのため使われ、対してKL Tool では "
"Report関数は一般的な出力のために使われます。"

#: ../../source/KLProgrammingGuide/globals.rst:912
msgid ""
"Outputs the KL function call stack that leads to the calling location, "
"including KL file names and line numbers. For example the following KL "
"code::"
msgstr "KL関数のコールスタックを出力します。KLファイルの名前・行位番号を含む呼び出し位置を含みます。以下にKLコード例を示します。"

#: ../../source/KLProgrammingGuide/globals.rst:929
msgid "Will output::"
msgstr "以下の出力となります:"

#: ../../source/KLProgrammingGuide/globals.rst:937
msgid "Error Status Functions"
msgstr "エラーステータスの関数"

#: ../../source/KLProgrammingGuide/globals.rst:939
msgid ""
"KL maintains a contextual error status which can be set, queried and "
"reset using some built-in functions. This status is restricted to the "
"contextual KL evaluation and thread. Some KL operations such as integer "
"divide-by-zero and array out-of-bounds access (when running KL with "
"bounds checking enabled) will internally call :kl:func:`setError`. "
"|FABRIC_PRODUCT_NAME| extensions typically set the error status as a way "
"to report operation failures."
msgstr ""
"KLは、エラーステータスのコンテキストを保持します。このステータスは組み込み関数により、設定(set)・照会(query)・リセットが可能です。このステータスは、KLの評価コンテキストとスレッドに制限されます。いくつかのKLでの操作"
" ――たとえば整数のゼロ除算, 配列の境界外アクセス(境界チェックを有効にしKLを実行している場合)など、は内部で  "
":kl:func:`setError` を呼びます。 |FABRIC_PRODUCT_NAME| "
"エクステンションは通常、操作の失敗を報告するためエラーステータスを設定します。"

#: ../../source/KLProgrammingGuide/globals.rst:944
msgid "Get the last error status that was set."
msgstr "設定されている最終エラーステータスを取得します。"

#: ../../source/KLProgrammingGuide/globals.rst:949
msgid "Resets the last error status."
msgstr "最終エラーステータスをリセットします。"

#: ../../source/KLProgrammingGuide/globals.rst:954
msgid ""
"Sets a new error status and reports it using the :kl:func:`report` "
"mechanism."
msgstr "新しいエラーステータスを設定し、 :kl:func:`report` メカニズムを利用しレポートします。"

#: ../../source/KLProgrammingGuide/globals.rst:959
msgid "Integer Numerical Functions"
msgstr "整数の数値演算関数"

#: ../../source/KLProgrammingGuide/globals.rst:961
msgid ""
"KL has support for several integer numerical functions that are helpful "
"when dealing with integer expressions.  Each of these functions has a "
"version for each of the numerical types (``UInt8``, ``SInt8``; "
"``UInt16``, ``SInt16``; ``UInt32``, ``SInt32``; ``UInt64``, ``SInt64``). "
"The one that is called is chosen using polymorphism best-match rules; see"
" :ref:`polymorphism`."
msgstr ""
"KLは、いくつかの整数関数をサポートします。整数式を扱う際に役立ちます。これら各関数には、それぞれの数値型 (``UInt8``, "
"``SInt8``; ``UInt16``, ``SInt16``; ``UInt32``, ``SInt32``; ``UInt64``, "
"``SInt64``)のバージョンがあります。実際にどの関数が呼ばれるかは、ポリモーフィズムのベストマッチルールに従い選ばれます。  "
":ref:`polymorphism` 参照"

#: ../../source/KLProgrammingGuide/globals.rst:966
msgid "Returns the integer absolute value of the argument."
msgstr "引数の値の整数の絶対値を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:968
msgid ""
"Regardless of the type of the argument ``n``, the type of the return "
"value is signed, and is the absolute value of the argument ``n`` "
"interpreted as a signed integer.  This allows the ``abs`` function to be "
"used on expressions involving differences of unsigned integers, eg. "
"``abs(Size(offset)-Size(index))``"
msgstr ""
"引数「 ``n`` 」の型によらず、返り値の型は符号付きとなり、符号付き整数として解釈される ``n`` の絶対値を返します。これによって "
"``abs`` 関数を、異なる符号なし整数同士を式に対して使用する（例:  ``abs(Size(offset)-Size(index))`` "
"）ことができます。"

#: ../../source/KLProgrammingGuide/globals.rst:973
msgid "Floating-Point Numerical Functions"
msgstr "浮動小数点数の数値演算関数"

#: ../../source/KLProgrammingGuide/globals.rst:975
msgid ""
"KL has support for many of the \"standard library\" floating-point "
"numerical functions from C.  Each of these functions has a version that "
"takes a parameter or parameters of type ``Float32``, and another that "
"takes a parameter or parameters of type ``Float64``.  The one that is "
"called is chosen using polymorphism best-match rules; see "
":ref:`polymorphism`."
msgstr ""
"KLは、C言語由来の「標準ライブラリ」より浮動小数点数の数値演算関数を多数サポートします。どの関数も ``Float32`` あるいは "
"``Float64`` "
"のパラメータ（複数可）をとるバージョンが存在します。実際にどの関数が呼ばれるかは、ポリモーフィズムのベストマッチルールに従い選ばれます。  "
":ref:`polymorphism`."

#: ../../source/KLProgrammingGuide/globals.rst:980
msgid "Trigonometric Functions"
msgstr "三角関数"

#: ../../source/KLProgrammingGuide/globals.rst:982
msgid ""
"Like the C standard library, all trigonometric function use radians for "
"their arguments and return values, where appropriate."
msgstr "C言語の標準ライブラリ同様、全ての三角関数は、引数と返り値ににラジアンを(それぞれ適切な箇所に)使用します。"

#: ../../source/KLProgrammingGuide/globals.rst:988
msgid ""
"Returns the sine of the angle :samp:`{x}`.  :samp:`{x}` is measured in "
"radians."
msgstr ":samp:`{x}` の角度の正弦（サイン）を返します。 :samp:`{x}` の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:994
msgid ""
"Returns the cosine of the angle :samp:`{x}`.  :samp:`{x}` is measured in "
"radians."
msgstr ":samp:`{x}` の角度の余弦(コサイン)を返します。 :samp:`{x}` の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:1000
msgid ""
"Returns the tangent of the angle :samp:`{x}`.  :samp:`{x}` is measured in"
" radians."
msgstr ":samp:`{x}` の角度の正接(タンジェント)を返します。 :samp:`{x}` の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:1006
msgid ""
"Returns the arcsine of the argument :samp:`{x}`.  The return value is "
"measured in radians."
msgstr ":samp:`{x}` の逆正弦(アークサイン)を返します。返り値の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:1012
msgid ""
"Returns the arccosine of the argument :samp:`{x}`.  The return value is "
"measured in radians."
msgstr ":samp:`{x}` の逆余弦(アークコサイン)を返します。返り値の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:1018
msgid ""
"Returns the arctangent of the argument :samp:`{x}`.  The return value is "
"measured in radians."
msgstr ":samp:`{x}` の逆正接(アークコタンジェント)を返します。返り値の単位はラジアンです。"

#: ../../source/KLProgrammingGuide/globals.rst:1020
msgid ""
"This function doesn't work for large :samp:`{x}` and can only return "
"values in the range :math:`(-\\pi/2,\\pi/2]`; use the :kl:func:`atan2` "
"function instead when possible."
msgstr ""
"この関数は巨大な :samp:`{x}` では機能しません。 :math:`(-\\pi/2,\\pi/2)` "
"の範囲でのみ値を返します。範囲外のものは :kl:func:`atan2` をかわりに使用します。"

#: ../../source/KLProgrammingGuide/globals.rst:1026
msgid ""
"Returns the arctangent of the ratio :samp:`{y}/{x}`; the result is "
"measured in radians and is in the range :math:`(-\\pi,\\pi]`."
msgstr ""
":samp:`{y}/{x}` の逆正接(アークタンジェント)をラジアンで返します; 返り値の範囲は :math:`(-\\pi,\\pi)` "
"になります。"

#: ../../source/KLProgrammingGuide/globals.rst:1031
msgid "Exponential and Logarithmic Functions"
msgstr "指数・対数関数"

#: ../../source/KLProgrammingGuide/globals.rst:1037
msgid "Returns the value of :samp:`{x}` raised to the power of :samp:`{y}`."
msgstr ":samp:`{x}` の :samp:`{y}` 乗の値を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1043
msgid ""
"Returns the value of :samp:`{x}` raised to the power of :samp:`{y}` where"
" :samp:`{y}` is an integer.  Uses exponentiation by squaring for very "
"high performance, and will expand into a fixed operation in the case that"
" :samp:`{y}` is a constant integer."
msgstr ""
":samp:`{x}` の :samp:`{y}` 乗の値を返します。 :samp:`{y}` は整数です。高速化のため２のべき乗を使用し、とくに"
" :samp:`{y}` が定数な整数である場合、固定操作に展開されます。"

#: ../../source/KLProgrammingGuide/globals.rst:1049
msgid ""
"Returns the value of :math:`e` raised to the power of :samp:`{x}` where "
":math:`e` is the base of the natural logarithm (approximately "
"2.7182818...)."
msgstr ":math:`e` の :samp:`{x}` 乗の値を返します。 :math:`e` は自然対数の底です (近似値は 2.7182818...)"

#: ../../source/KLProgrammingGuide/globals.rst:1055
msgid "Returns the natural (base :math:`e`) logarithm of :samp:`{x}`."
msgstr ":samp:`{x}` の自然対数を返します（底は :math:`e` ）"

#: ../../source/KLProgrammingGuide/globals.rst:1061
msgid "Returns the common (base 10) logarithm of :samp:`{x}`."
msgstr ":samp:`{x}` の10を底とした対数(常用対数)を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1066
msgid "Non-Transcendental Functions"
msgstr "非超越関数"

#: ../../source/KLProgrammingGuide/globals.rst:1072
msgid "Returns the absolute value of :samp:`{x}`."
msgstr ":samp:`{x}` の絶対値を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1078
msgid ""
"Returns the value of :samp:`{x}` rounded to the nearest whole (fractional"
" part of zero) floating-point number."
msgstr ":samp:`{x}` に、最も近い整数(ゼロの小数部)に丸めた浮動小数点数の値を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1084
msgid ""
"Returns the greatest whole floating-point number less than or equal to "
":samp:`{x}`."
msgstr ":samp:`{x}` と等しいか、:samp:`{x}` 以下の最も大きい整数を浮動小数点数で返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1090
msgid ""
"Returns the smallest whole floating-point number greater than or equal to"
" :samp:`{x}`."
msgstr ":samp:`{x}` と等しいか、:samp:`{x}` 以上の最も小さい整数を浮動小数点数で返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1093
msgid "Category Functions"
msgstr "カテゴリ関数"

#: ../../source/KLProgrammingGuide/globals.rst:1099
msgid ""
"Returns true if and only if the floating-point number is a regular "
"floating-point number; that is, if it is not infinite and not a NaN "
"(not-a-number) value."
msgstr "浮動小数点数が、通常の浮動小数点数である場合にのみ true を返します。つまり、infinite や NaN（非数）値でない場合です。"

#: ../../source/KLProgrammingGuide/globals.rst:1105
msgid ""
"Returns true if and only if the floating-point number is infinite.  Note "
"that this does not check for NaN values; use the "
":kl:method:`Float32.isNaN()` method for that."
msgstr ""
"浮動小数点数が、infinite 浮動小数点数である場合にのみ true を返します。ただし NaN（非数）値チェックは行いません。必要であれば "
":kl:method:`Float32.isNaN()` を併用してください。"

#: ../../source/KLProgrammingGuide/globals.rst:1111
msgid ""
"Returns true if and only if the floating-point number is a not-a-number "
"(NaN) value.  Note that this does not check for infinite values; use the "
":kl:method:`Float32.isInf()` method for that."
msgstr ""
"浮動小数点数が、非数（NaN)な浮動小数点数である場合にのみ true を返します。ただし infinite 値チェックは行いません。必要であれば"
" :kl:method:`Float32.isInf()` を併用してください。"

#: ../../source/KLProgrammingGuide/globals.rst:1115
msgid ""
"For a floating-point value ``x``, the condition ``!x.isReg()`` is "
"equivalent to ``x.isInf() || x.isNaN()``"
msgstr "ある浮動小数点数  ``x`` について、 ``!x.isReg()`` は  ``x.isInf() || x.isNaN()`` と同等です"

#: ../../source/KLProgrammingGuide/globals.rst:1120
msgid "Vector Functions"
msgstr "ベクタ関数"

#: ../../source/KLProgrammingGuide/globals.rst:1122
msgid ""
"KL support a large set of :dfn:`vector functions` that are automatically "
"made available for structures whose members are all of the same integer "
"or floating-point type (as is usually the case for structures that "
"represent vectors).  The KL compiler automatically reduces the function "
"call to vector intrinsic operation that is optimal for the running "
"architecture; for example, on a modern Intel x86 machine they will be "
"reduced to instructions using the SSE or AVX vector extensions, resulting"
" in improved performance over non-vector code."
msgstr ""
"KLは、大規模な :dfn:`vector functions` "
"一式そろえています。これらの関数は以下の構造ぶつについて自動的に使用可能となります； 構造体のメンバが "
"―全て同じ整数型である,あるいは全て同じ浮動小数点数型である；（つまりベクタを表現する構造体が通常そうであるように）KLコンパイラは、実行中のアーキテクチャに最適なベクタ固有の操作となるよう、呼び出す関数を削減します。たとえば現代の"
" Intel "
"x86マシン上であれば、SSEまたはAVXのベクタ拡張を使用し命令(instruction)を削減します。これにより非ベクタコードを凌ぐパフォーマンスの改善を見込めます。"

#: ../../source/KLProgrammingGuide/globals.rst:1124
msgid ""
"When :samp:`{<V>}` is a structure whose members :samp:`{<m1>}, {<m2>}, "
"... {<mN>}` are all of exactly the same integer or floating-point type "
":samp:`{<T>}`, the following functions are made available:"
msgstr ""
":samp:`{<V>}` が構造体であり、メンバ :samp:`{<m1>}, {<m2>}, ... {<mN>}` "
"が全て同一の（整数、浮動小数点数の）型 :samp:`{<T>}` であるなら、以下の関数が利用可能です:"

#: ../../source/KLProgrammingGuide/globals.rst:1129
msgid ""
"Returns :samp:`lhs.{m1} + rhs.{m1}`, :samp:`lhs.{m2} + rhs.{m2}`, ... "
":samp:`lhs.{mN} + rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} + rhs.{m1}`, :samp:`lhs.{m2} + rhs.{m2}`, ... "
":samp:`lhs.{mN} + rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1134
msgid ""
"Returns :samp:`k + rhs.{m1}`, :samp:`k + rhs.{m2}`, ... :samp:`k + "
"rhs.{mN}`"
msgstr ":samp:`k + rhs.{m1}`, :samp:`k + rhs.{m2}`, ... :samp:`k + rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1139
msgid ""
"Returns :samp:`lhs.{m1} + k`, :samp:`lhs.{m2} + k`, ... :samp:`lhs.{mN} +"
" k`"
msgstr ":samp:`lhs.{m1} + k`, :samp:`lhs.{m2} + k`, ... :samp:`lhs.{mN} + k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1144
msgid ""
"Returns :samp:`lhs.{m1} - rhs.{m1}`, :samp:`lhs.{m2} - rhs.{m2}`, ... "
":samp:`lhs.{mN} - rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} - rhs.{m1}`, :samp:`lhs.{m2} - rhs.{m2}`, ... "
":samp:`lhs.{mN} - rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1149
msgid ""
"Returns :samp:`k - rhs.{m1}`, :samp:`k - rhs.{m2}`, ... :samp:`k - "
"rhs.{mN}`"
msgstr ":samp:`k - rhs.{m1}`, :samp:`k - rhs.{m2}`, ... :samp:`k - rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1154
msgid ""
"Returns :samp:`lhs.{m1} - k`, :samp:`lhs.{m2} - k`, ... :samp:`lhs.{mN} -"
" k`"
msgstr ":samp:`lhs.{m1} - k`, :samp:`lhs.{m2} - k`, ... :samp:`lhs.{mN} - k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1159
msgid ""
"Returns :samp:`lhs.{m1} * rhs.{m1}`, :samp:`lhs.{m2} * rhs.{m2}`, ... "
":samp:`lhs.{mN} * rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} * rhs.{m1}`, :samp:`lhs.{m2} * rhs.{m2}`, ... "
":samp:`lhs.{mN} * rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1164
msgid ""
"Returns :samp:`k * rhs.{m1}`, :samp:`k * rhs.{m2}`, ... :samp:`k * "
"rhs.{mN}`"
msgstr ":samp:`k * rhs.{m1}`, :samp:`k * rhs.{m2}`, ... :samp:`k * rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1169
msgid ""
"Returns :samp:`lhs.{m1} * k`, :samp:`lhs.{m2} * k`, ... :samp:`lhs.{mN} *"
" k`"
msgstr ":samp:`lhs.{m1} * k`, :samp:`lhs.{m2} * k`, ... :samp:`lhs.{mN} * k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1174
msgid ""
"Returns :samp:`lhs.{m1} / rhs.{m1}`, :samp:`lhs.{m2} / rhs.{m2}`, ... "
":samp:`lhs.{mN} / rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} / rhs.{m1}`, :samp:`lhs.{m2} / rhs.{m2}`, ... "
":samp:`lhs.{mN} / rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1179
msgid ""
"Returns :samp:`k / rhs.{m1}`, :samp:`k / rhs.{m2}`, ... :samp:`k / "
"rhs.{mN}`"
msgstr ":samp:`k / rhs.{m1}`, :samp:`k / rhs.{m2}`, ... :samp:`k / rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1184
msgid ""
"Returns :samp:`lhs.{m1} / k`, :samp:`lhs.{m2} / k`, ... :samp:`lhs.{mN} /"
" k`"
msgstr ":samp:`lhs.{m1} / k`, :samp:`lhs.{m2} / k`, ... :samp:`lhs.{mN} / k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1189
#, python-format
msgid ""
"Returns :samp:`lhs.{m1} % rhs.{m1}`, :samp:`lhs.{m2} % rhs.{m2}`, ... "
":samp:`lhs.{mN} % rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} % rhs.{m1}`, :samp:`lhs.{m2} % rhs.{m2}`, ... "
":samp:`lhs.{mN} % rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1194
#, python-format
msgid ""
"Returns :samp:`k % rhs.{m1}`, :samp:`k % rhs.{m2}`, ... :samp:`k % "
"rhs.{mN}`"
msgstr ":samp:`k % rhs.{m1}`, :samp:`k % rhs.{m2}`, ... :samp:`k % rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1199
msgid ""
"Returns :samp:`lhs.{m1} % k`, :samp:`lhs.{m2} % k`, ... :samp:`lhs.{mN} %"
" k`"
msgstr ":samp:`lhs.{m1} % k`, :samp:`lhs.{m2} % k`, ... :samp:`lhs.{mN} % k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1201
msgid ""
"When ``<T>`` is an integer type, the following additional function are "
"available:"
msgstr "``<T>`` が整数型であれば、更に追加で以下の関数が利用可能です。"

#: ../../source/KLProgrammingGuide/globals.rst:1206
msgid ""
"Returns :samp:`lhs.{m1} | rhs.{m1}`, :samp:`lhs.{m2} | rhs.{m2}`, ... "
":samp:`lhs.{mN} | rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} | rhs.{m1}`, :samp:`lhs.{m2} | rhs.{m2}`, ... "
":samp:`lhs.{mN} | rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1211
msgid ""
"Returns :samp:`k | rhs.{m1}`, :samp:`k | rhs.{m2}`, ... :samp:`k | "
"rhs.{mN}`"
msgstr ":samp:`k | rhs.{m1}`, :samp:`k | rhs.{m2}`, ... :samp:`k | rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1216
msgid ""
"Returns :samp:`lhs.{m1} | k`, :samp:`lhs.{m2} | k`, ... :samp:`lhs.{mN} |"
" k`"
msgstr ":samp:`lhs.{m1} | k`, :samp:`lhs.{m2} | k`, ... :samp:`lhs.{mN} | k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1221
msgid ""
"Returns :samp:`lhs.{m1} & rhs.{m1}`, :samp:`lhs.{m2} & rhs.{m2}`, ... "
":samp:`lhs.{mN} & rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} & rhs.{m1}`, :samp:`lhs.{m2} & rhs.{m2}`, ... "
":samp:`lhs.{mN} & rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1226
msgid ""
"Returns :samp:`k & rhs.{m1}`, :samp:`k & rhs.{m2}`, ... :samp:`k & "
"rhs.{mN}`"
msgstr ":samp:`k & rhs.{m1}`, :samp:`k & rhs.{m2}`, ... :samp:`k & rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1231
msgid ""
"Returns :samp:`lhs.{m1} & k`, :samp:`lhs.{m2} & k`, ... :samp:`lhs.{mN} &"
" k`"
msgstr ":samp:`lhs.{m1} & k`, :samp:`lhs.{m2} & k`, ... :samp:`lhs.{mN} & k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1236
#, fuzzy
msgid ""
"Returns :samp:`lhs.{m1} ^ rhs.{m1}`, :samp:`lhs.{m2} ^ rhs.{m2}`, ... "
":samp:`lhs.{mN} ^ rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} ^ rhs.{m1}`, :samp:`lhs.{m2} ^ rhs.{m2}`, ... "
"samp:`lhs.{mN} ^ rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1241
msgid ""
"Returns :samp:`k ^ rhs.{m1}`, :samp:`k ^ rhs.{m2}`, ... :samp:`k ^ "
"rhs.{mN}`"
msgstr ":samp:`k ^ rhs.{m1}`, :samp:`k ^ rhs.{m2}`, ... :samp:`k ^ rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1246
msgid ""
"Returns :samp:`lhs.{m1} ^ k`, :samp:`lhs.{m2} ^ k`, ... :samp:`lhs.{mN} ^"
" k`"
msgstr ":samp:`lhs.{m1} ^ k`, :samp:`lhs.{m2} ^ k`, ... :samp:`lhs.{mN} ^ k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1251
msgid ""
"Returns :samp:`lhs.{m1} << rhs.{m1}`, :samp:`lhs.{m2} << rhs.{m2}`, ... "
":samp:`lhs.{mN} << rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} << rhs.{m1}`, :samp:`lhs.{m2} << rhs.{m2}`, ... "
":samp:`lhs.{mN} << rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1256
msgid ""
"Returns :samp:`k << rhs.{m1}`, :samp:`k << rhs.{m2}`, ... :samp:`k << "
"rhs.{mN}`"
msgstr ""
":samp:`k << rhs.{m1}`, :samp:`k << rhs.{m2}`, ... :samp:`k << rhs.{mN}` "
"を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1261
msgid ""
"Returns :samp:`lhs.{m1} << k`, :samp:`lhs.{m2} << k`, ... :samp:`lhs.{mN}"
" << k`"
msgstr ""
"Returns :samp:`lhs.{m1} << k`, :samp:`lhs.{m2} << k`, ... :samp:`lhs.{mN}"
" << k` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1266
msgid ""
"Returns :samp:`lhs.{m1} >> rhs.{m1}`, :samp:`lhs.{m2} >> rhs.{m2}`, ... "
":samp:`lhs.{mN} >> rhs.{mN}`"
msgstr ""
":samp:`lhs.{m1} >> rhs.{m1}`, :samp:`lhs.{m2} >> rhs.{m2}`, ... "
":samp:`lhs.{mN} >> rhs.{mN}` を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1271
msgid ""
"Returns :samp:`k >> rhs.{m1}`, :samp:`k >> rhs.{m2}`, ... :samp:`k >> "
"rhs.{mN}`"
msgstr ""
":samp:`k >> rhs.{m1}`, :samp:`k >> rhs.{m2}`, ... :samp:`k >> rhs.{mN}` "
"を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1276
msgid ""
"Returns :samp:`lhs.{m1} >> k`, :samp:`lhs.{m2} >> k`, ... :samp:`lhs.{mN}"
" >> k`"
msgstr ""
":samp:`lhs.{m1} >> k`, :samp:`lhs.{m2} >> k`, ... :samp:`lhs.{mN} >> k` "
"を返します"

#: ../../source/KLProgrammingGuide/globals.rst:1281
msgid "Conversion Functions"
msgstr "変換関数"

#: ../../source/KLProgrammingGuide/globals.rst:1288
msgid ""
"The :code:`appendDesc` method is called to convert the given type to a "
":code:`String`.  You can write a custom :code:`appendDesc` method to "
"customize this conversion, as shown in the following example:"
msgstr ""
":code:`appendDesc` メソッドを与えられた型から :code:`String` へと変換するために呼びます。独自の "
":code:`appendDesc` メソッドを記述し、この変換をカスタマイズすることができます。以下に例示します:"

#: ../../source/KLProgrammingGuide/globals.rst:1320
msgid ""
"Converts an unsigned integer value into a hexadecimal string "
"representation of the value."
msgstr "符号なし整数を16進数文字列値の表現へと変換します。"

#: ../../source/KLProgrammingGuide/globals.rst:1328
msgid ""
"Converts an integer value into a hexadecimal string representation of the"
" value.  The output is as if ``n`` was of the corresponding unsigned "
"integer type; there is no consideration for negative values."
msgstr "整数を16進数文字列値の表現へと変換します。 ``n`` が対応する符号なし整数であるかのように出力されます。つまり負の値は考慮されません。"

#: ../../source/KLProgrammingGuide/globals.rst:1334
msgid ""
"Bitcasts an unsigned integer of the same width to a floating-point "
"number.  This is a non-numerical conversion that is mostly useful for "
"unit testing KL itself."
msgstr "符号なし整数を同じ幅をもつ浮動小数点数へとビットキャストします。これはKL自体のユニットテストを行う際とても有用な、非数値変換です。"

#: ../../source/KLProgrammingGuide/globals.rst:1340
msgid ""
"Bitcasts a floating-point number to an unsigned integer of the same "
"width.  This is a non-numerical conversion that is mostly useful for unit"
" testing KL itself."
msgstr "浮動小数点数を同じ幅をもつ符号なし整数へとビットキャストします。これはKL自体のユニットテストを行う際とても有用な、非数値変換です。"

#: ../../source/KLProgrammingGuide/globals.rst:1343
msgid "Thread/Core-related Functions"
msgstr "スレッド,コア関連の関数"

#: ../../source/KLProgrammingGuide/globals.rst:1348
msgid ""
"Returns the index of the currently-executing thread.  This number is "
"guaranteed to be in the range 0 to kl:func:`getThreadCount()`-1."
msgstr ""
"現在実行中のスレッドインデックス番号を返します。この値は  0 から :kl:func:`getThreadCount()`-1 "
"であることが保証されます。"

#: ../../source/KLProgrammingGuide/globals.rst:1350
msgid ""
"For a give PEX workload, two concurrently executing threads are "
"guaranteed to return different values for this function."
msgstr "PEXワークロードにおける、ある2つの同時実行スレッドおいて、この関数はそれぞれ異なる値を返すことが保証されます。"

#: ../../source/KLProgrammingGuide/globals.rst:1355
msgid "Returns the upper bound of the :kl:func:`getThreadIndex()` return value."
msgstr ":kl:func:`getThreadIndex()` で返る最大値を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1360
msgid "Returns the number of CPU cores in the machine."
msgstr "マシンのCPUコア数を返します。"

#: ../../source/KLProgrammingGuide/globals.rst:1365
msgid ""
"Produces an atomic memory barrier at this point in the code.  The barrier"
" is a \"full\" (sequentially consistent) barrier."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1371
msgid ""
"Produces an atomic memory barrier at this point in the code.  The barrier"
" is a \"acquire\" barrier."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1377
msgid ""
"Produces an atomic memory barrier at this point in the code.  The barrier"
" is a \"release\" barrier."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1383
msgid ""
"Produces an atomic memory barrier at this point in the code.  The barrier"
" is a \"acquire-release\" barrier."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1387
msgid "Performance Counter Functions"
msgstr "パフォーマンス計測関数"

#: ../../source/KLProgrammingGuide/globals.rst:1389
msgid ""
"KL provides access to high-performance system timer information that can "
"be used to time operations from within KL code."
msgstr "KLは、高性能ななシステムタイマ情報へアクセスを提供し、KLコード中から、操作に要する時間の情報についてアクセスすることができます。"

#: ../../source/KLProgrammingGuide/globals.rst:1394
msgid ""
"Returns the current value of the performance counter.  This number has no"
" meaning on its own (ie. its units are undefined) but can be used in "
"calls to ``getSecondsBetweenTicks()`` to measure absolute elapsed time.  "
"Note that the value returned by ``getCurrentTicks()`` is not affected by "
"system (\"wall\") clock time changes."
msgstr ""
"パフォーマンスカウンタの現在の値を返します。この値はそれ自体に意味があるわけでありません(単位はundefined)。ですが "
"``getSecondsBetweenTicks()`` の呼び出す中に使用することで、経過時間の絶対時間で計測します。  "
"``getCurrentTicks()`` で返る値は、システム時計（壁時計）の変更の影響を受けません。"

#: ../../source/KLProgrammingGuide/globals.rst:1399
msgid ""
"Returns the number of seconds between two performance counter values.  "
"The measurable resolution is guaranteed to be at least one million parts "
"per second."
msgstr "2つのパフォーマンスカウンタ間の値を「秒」で返します。計測解像度は、少なくとも100万分の1秒であることが保証されます。"

#: ../../source/KLProgrammingGuide/globals.rst:1401
msgid "Example usage of the performance counter functions::"
msgstr "パフォーマンス計測関数の使用例："

#: ../../source/KLProgrammingGuide/globals.rst:1415
#, fuzzy
msgid "Memory Usage Functions"
msgstr "カテゴリ関数"

#: ../../source/KLProgrammingGuide/globals.rst:1420
msgid ""
"Returns the number of bytes currently allocated on the KL heap.  Memory "
"is allocated on the KL heap in order to provide memory for variable "
"arrays, dictionaries, objects, most strings, and some other less-commonly"
" used types."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1422
msgid "This function cannot be called on the GPU"
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1433
msgid "Fabric Context Functions"
msgstr "Fabric Context 関数"

#: ../../source/KLProgrammingGuide/globals.rst:1435
msgid "These functions are used to interact with the Fabric Core context."
msgstr "Fabric Core コンテキストとやり取りするための関数です。"

#: ../../source/KLProgrammingGuide/globals.rst:1440
msgid ""
"Returns the Fabric Core context ID as a String.  This context ID can be "
"used to bind a new Fabric Core client to an existing context."
msgstr ""
"Fabric Core コンテキストIDを文字列で返します。このコンテキストIDは、新規のFabric "
"Coreクライアントと、既存のコンテキストをバインドするため使用します。"

#: ../../source/KLProgrammingGuide/globals.rst:1449
msgid "Named Constants"
msgstr "名前付き定数"

#: ../../source/KLProgrammingGuide/globals.rst:1451
msgid ""
"A :dfn:`named constant` in KL is a value that can be referred to by name "
"in expressions but that cannot be changed at runtime.  Named constants "
"are essentially read-only variables; however, since the KL compiler knows"
" that their value can never change, it can often produce faster code when"
" named constants are used in place of variables.  Both scalar and array "
"named constants can be declared."
msgstr ""
"KLにおいて :dfn:`named constant` "
"とは、式中より名前により参照されるある値のことであり、実行時に変更することができない値です。名前付き定数は、基本的に read-only "
"な変数です；しかし、KLコンパイラにとってその値が不変であることがわかっているため、ただの変数のかわりに名前付き定数を使用すると、高速なコードとなります。スカラ、あるいは配列の名前付き定数を宣言することができます。"

#: ../../source/KLProgrammingGuide/globals.rst:1458
msgid ""
"Named constants can be declared within any scope (see :ref:`scope`), "
"including the global scope.  Named constants are only visible within the "
"scope in which they are declared."
msgstr ""
"名前付き定数はどのスコープ中（グローバルスコープも含む）にも宣言が可能です。（スコープについては :ref:`scope` "
"参照）名前付き定数は、宣言されたスコープ中からのみ可視となります。"

#: ../../source/KLProgrammingGuide/globals.rst:1462
msgid "Scalar named constants take the form:"
msgstr "スカラの名前付き定数は以下の形態をとります:"

#: ../../source/KLProgrammingGuide/globals.rst:1468
msgid "and array named constants take the form:"
msgstr "配列の名前付き定数は以下の形式を取ります:"

#: ../../source/KLProgrammingGuide/globals.rst:1476
msgid ""
"In either case, :samp:`{Type}` must be a boolean, integer, floating-point"
" or string type; :samp:`{name}` must be an identifier; and :samp:`{expr}`"
" must be an expression involving constant(s) that evaluates to a constant"
" of type `{Type}`.  In the case of a scalar named constant, the type of "
"the named constant is :samp:`{Type}`.  In the case of an array named "
"constant, the type of the named constant is a fixed array of elements of "
"type :samp:`{Type}`; the size of the fixed array is the number of "
"initializing values given within the brackets."
msgstr ""
"どちらのケースも、 :samp:`{Type}` は boolean, integer, floating-point, string "
"いずれかの型である; :samp:`{name}` は識別子;  :samp:`{expr}` は `{Type}` "
"型の定数として評価される定数を含む式である必要があります。スカラの名前付き定数の場合、その型は :samp:`{Type}` "
"です。配列の名前付き定数の場合、その型は :samp:`{Type}` 型の要素の固定長配列です; "
"この配列のサイズは、カッコ内に与えられた初期化する値の数と同一になります。"

#: ../../source/KLProgrammingGuide/globals.rst:1478
msgid "It is a compile-time error to do any of the following:"
msgstr "以下のどれかをするとコンパイル時にエラーとなります。"

#: ../../source/KLProgrammingGuide/globals.rst:1480
msgid "assign to a named constant"
msgstr "名前付き定数への代入"

#: ../../source/KLProgrammingGuide/globals.rst:1482
msgid "pass a named constant to a function as an ``io`` parameter"
msgstr "関数の ``io`` パラメータとして名前付き定数を渡す"

#: ../../source/KLProgrammingGuide/globals.rst:1484
msgid ""
"declare a global named constant with the same name as a function, "
"operator or another global named constant"
msgstr "既存の関数（あるいはオペレータ、他の名前付き定数）と同名でグローバル名前付き定数を宣言"

#: ../../source/KLProgrammingGuide/globals.rst:1486
msgid ""
"declare a non-global named constant with the same name as a variable or "
"another named constant declared in the same scope"
msgstr "同一スコープ内の、既存の変数（あるいは他の名前付き定数）と同名で非グローバルな名前付き定数を宣言"

#: ../../source/KLProgrammingGuide/globals.rst:1488
msgid "Example usage of named constants:"
msgstr "名前付き定数の例:"

#: ../../source/KLProgrammingGuide/globals.rst:1524
msgid "Predefined Constants"
msgstr "事前定義された定数"

#: ../../source/KLProgrammingGuide/globals.rst:1526
msgid "There are a variety of predefined constants available to every KL program."
msgstr "全KLプログラムで利用可能な種々の事前定義された定数があります。"

#: ../../source/KLProgrammingGuide/globals.rst:1529
msgid "Fabric Version Pre-Defined Constants"
msgstr "Fabric バージョン Pre-Defined 定数"

#: ../../source/KLProgrammingGuide/globals.rst:1531
msgid ""
"The three constants ``FabricVersionMaj``, ``FabricVersionMin`` and "
"``FabricVersionRev`` are three predefined constants of type ``UInt8`` "
"that are the major, minor and revision components of the running Fabric "
"version.  For example, this documentation was built for Fabric version "
"|FABRIC_VERSION|, and so KL code executed in this version will have "
"``FabricVersionMaj = |FABRIC_VERSION_MAJ|``, ``FabricVersionMin = "
"|FABRIC_VERSION_MIN|`` and ``FabricVersionRev = |FABRIC_VERSION_REV|``."
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1542
msgid "Integer Limit Pre-Defined Constants"
msgstr "整数限界の事前定義定数"

#: ../../source/KLProgrammingGuide/globals.rst:1544
msgid ""
"For every integer type ``<IntTy>`` there is a pre-defined integer "
"constant ``<IntTy>Max`` that is the maximum value the integer can attain."
"  Additionally, for signed integer types there is a pre-defined integer "
"constant ``<IntTy>Min`` that is the minimum value the integer can attain."
"  In both cases, the type of the integer constant is the type of the "
"integer itself.  For example:"
msgstr ""
"全ての整数型 ``<IntTy>`` には事前定義された整数定数 ``<IntTy>Max`` "
"があり、整数が許容する最大値を示します。符号付き整数では追加で  ``<IntTy>Min`` "
"があり、整数の許容する最小値を示します。どちらでも整数定数の型はその整数自身の型です。例:"

#: ../../source/KLProgrammingGuide/globals.rst:1563
msgid "produces:"
msgstr "出力結果"

#: ../../source/KLProgrammingGuide/globals.rst:1581
msgid "The ``FUNC`` Pre-Defined Constants"
msgstr "``FUNC`` 事前定義定数"

#: ../../source/KLProgrammingGuide/globals.rst:1583
msgid ""
"The KL compiler automatically predefines the constant ``FUNC`` at the "
"start of every function as a string constant describing the function.  "
"The following code:"
msgstr "KLコンパイラは、関数のスタート時その関数を説明する文字列定数として、自動的に ``FUNC`` を事前定義します。以下のコードにしたがいます:"

#: ../../source/KLProgrammingGuide/globals.rst:1595
msgid "produces the output:"
msgstr "出力結果"

#: ../../source/KLProgrammingGuide/globals.rst:1607
msgid "Importing Functionality With ``require``"
msgstr "``require`` による機能のインポート"

#: ../../source/KLProgrammingGuide/globals.rst:1609
msgid ""
"Through integration with Fabric, it is possible for derived KL types "
"and/or Fabric extensions to provide KL code that is defined externally to"
" the current source file.  To use these types and code within the current"
" source file, the ``require`` statement is provided; it is similar to the"
" ``import`` statement in Python."
msgstr ""
"Fabric との統合により、――たとえばKLの型と（もしくは） Fabricエクステンションを継承するため―― "
"外部に定義されたKLコードを現在のソースコードへと提供することが可能となります。これらの型、コードを現在のソースファイルで使用するには、 "
"``require`` 文を使用します; Pythonにおける ``import`` 文と似ています。"

#: ../../source/KLProgrammingGuide/globals.rst:1615
msgid ""
"The ``require`` statement should be followed by the name of the "
"registered type or extension.  For example, to include the functionality "
"provided by the extension named \"Math\" and the registered type named "
"\"RegType\", the program should start with::"
msgstr ""
"`require`` 文の後には、登録された型（registered type）、エクステンションの名前を続けます。例えば、 \"Math\" "
"という名のエクステンションと \"RegType\" "
"という名の登録された方に提供されているの機能を含めたいのであれば、このようにプログラムをはじめます:"

#: ../../source/KLProgrammingGuide/globals.rst:1622
msgid ""
"Any ``require`` statements must appear at the top of the KL program that "
"uses the associated functionality.  You can have as many ``require`` "
"statements as you would like."
msgstr ""
"どの ``require`` 文も 関連する機能をつかうKLプログラム中、最上部に記載します。複数の ``require`` "
"文を望みの数記述することもできます。"

#: ../../source/KLProgrammingGuide/globals.rst:1629
msgid "Using ``require`` with version information"
msgstr "バージョン情報と共に ``require`` を使用する"

#: ../../source/KLProgrammingGuide/globals.rst:1631
msgid ""
"By default the ``require`` statement will load the latest version of the "
"extension available. So for example given two versions of the "
":code:`ExtensionName` extension with the versions :code:`\"1.0.0\"` and "
":code:`\"1.2.1\"`, doing"
msgstr ""
"ディフォルトで ``require`` 文は、エクステンションの利用可能な最新バージョンのを読み込みに行きます。 "
":code:`ExtensionName` エクステンションに2つのバージョン  :code:`\"1.0.0\"` と "
":code:`\"1.2.1\"` があるとします、"

#: ../../source/KLProgrammingGuide/globals.rst:1639
msgid ""
"will result in the version :code:`\"1.2.1\"` being loaded. If you want to"
" load a specific version, you can use the following syntax"
msgstr ""
"とすると、 :code:`\"1.2.1\"` "
"バージョンのものが読み込まれる結果となります。もし特定バージョンのものを読み込みたいのであれば、以下のシンタックスにより"

#: ../../source/KLProgrammingGuide/globals.rst:1646
msgid ""
"which will result in loading the specific :code:`\"1.0.0\"` version of "
"the extension. If the specific version cannot be found, an error will be "
"thrown. Alternatively, if you just want to make sure an extension version"
" is higher than a specific version number, you can use the lesser / "
"greater sign like so:"
msgstr ""
"指定した :code:`\"1.0.0\"` "
"バージョンが読み込まれます。そのバージョンが存在しない場合、エラーが投げられます。あるいは、エクステンションが指定バージョン以上であることが望みであれば、大なり小なり不等号記号を使用し、以下のようにします:"

#: ../../source/KLProgrammingGuide/globals.rst:1655
msgid ""
"If the version lesser / greater than what is specified cannot be found, "
"an error will be thrown. In this example the :code:`\"1.2.1\"` version of"
" the extension will be loaded."
msgstr ""
"指定のバージョン以下、（以上）が存在しない場合は、やはりエラーが投げられます。この例ではバージョン :code:`\"1.2.1\"` "
"が読み込まれます。"

#: ../../source/KLProgrammingGuide/globals.rst:1658
msgid ""
"Furthermore you can use preprocessor statements to add optional KL code "
"or to switch behaviors based on extension versions. For that you can use "
"the :code:`EXT_VER_IF: and :code:`EXT_VER_ENDIF` statements. For this you"
" can use the equal, lesser or greater sign."
msgstr ""
"さらに、プリプロセッサ文を使用しオプションのKLコードを追加したり、あるいは、エクステンションのバージョンに基づいた振舞のスイッチをさせたりすることができます。"
" :code:`EXT_VER_IF: と :code:`EXT_VER_ENDIF` 文を使用し、等号、大なり、小なり記号を利用できます。"

#: ../../source/KLProgrammingGuide/globals.rst:1684
msgid ""
"The :code:`dummy` function's definition and invocation will only happen "
"if the extension version of the :code:`ExtensionName` is higher to "
":code:`\"1.0.0\"` in the example above."
msgstr ""
":code:`dummy` 関数の定義と呼び出しは、エクステンション :code:`ExtensionName` のバージョンが "
":code:`\"1.0.0\"` 以上の場合にのみ、上記の例では発生します。"

#: ../../source/KLProgrammingGuide/globals.rst:1687
msgid ""
"If you wish to check the version of Fabric itself, use :code:`Fabric` as "
"the extension name:"
msgstr ""

#: ../../source/KLProgrammingGuide/globals.rst:1707
#: ../../source/KLProgrammingGuide/globals.rst:1761
msgid ""
"For more information on how to embed versioning information in extensions"
" please refer to :ref:`EXTS_VERSIONING`."
msgstr "バージョン情報をエクステンションに埋め込むための、より詳しい情報については :ref:`EXTS_VERSIONING` をご参照ください。"

#: ../../source/KLProgrammingGuide/globals.rst:1712
msgid "Extension versioning environment variables"
msgstr "エクステンションのバージョニング環境変数"

#: ../../source/KLProgrammingGuide/globals.rst:1714
msgid ""
"Additional to the facilities mentioned above in "
":ref:`KLPG.require.versioning` you can drive the :code:`require` "
"statement with a set of environment variables. There are several ways to "
"use environment variables."
msgstr ""
"上述の :ref:`KLPG.require.versioning` の機能につけくわえ、環境変数の設定によっても :code:`require`"
" 文を駆動することができます。環境変数を使用するにはいくつか方法があります。"

#: ../../source/KLProgrammingGuide/globals.rst:1717
msgid ""
"The first approach, which uses a single environment variable for each "
"extension, defines an environment variable like so:"
msgstr "１番目のアプローチは、各エクステンションに対し単一の環境変数を使用します。環境変数の定義は次のようにします:"

#: ../../source/KLProgrammingGuide/globals.rst:1723
msgid ""
"For the second approach, which suits environments better when you have to"
" switch between a large amount of environment variables for a given build"
" set, first you may optionally specify the "
":envvar:`FABRIC_EXT_VER_PREFIX` and :envvar:`FABRIC_EXT_VER_SUFFIX` "
"environment variables, which contain a prefix and a suffix to be used "
"when looking up additional environment variables, or you can use their "
"default values."
msgstr ""
"２番めのアプローチは、とくに、与えられたあるビルドセットに対し大量の環境変数を切り替える必要があるような場合、とてもぴったりです。（オプション）はじめに"
" :envvar:`FABRIC_EXT_VER_PREFIX` と :envvar:`FABRIC_EXT_VER_SUFFIX` "
"環境変数を指定します; "
"この変数に、追加の環境変数を検索する際に使用される、接頭語と接尾語を設定します。指定しない場合はディフォルト値が使用されます。"

#: ../../source/KLProgrammingGuide/globals.rst:1725
msgid ""
"Then for each extension you may specify an environment variable using the"
" prefix and suffix and the extension's name, which will then contain the "
"versioning information. For example, using the default prefix and suffix:"
msgstr ""
"つぎに、接頭語と接尾語とエクステンション名を使用し、各エクステンションに対し環境変数 ―結果としてバージョン情報含むことになる― "
"をそれぞれ指定します。ディフォルトの接頭語と接尾語を用いた例:"

#: ../../source/KLProgrammingGuide/globals.rst:1731
msgid "Or changing the prefix and suffix:"
msgstr "接頭語と接尾語を利用するようにした例:"

#: ../../source/KLProgrammingGuide/globals.rst:1739
msgid ""
"This would resolve in the extension loading mechanism to first resolve "
"the :envvar:`FABRIC_EXT_VER_PREFIX` and :envvar:`FABRIC_EXT_VER_SUFFIX` "
"environment variables, then will resolve the "
":envvar:`COMPANY_EXTENSIONNAME_VER_INFO` based on these and will figure "
"out that version 1.0.0 of the two available versions should be used."
msgstr ""
"これは、エクステンションの読み込みメカニズム中、以下のように解決されます。はじめに :envvar:`FABRIC_EXT_VER_PREFIX`"
" と :envvar:`FABRIC_EXT_VER_SUFFIX` 環境変数を解決します。次に以上にもとづく名前をもつ "
":envvar:`COMPANY_EXTENSIONNAME_VER_INFO` 変数によって、利用可能な２つのバージョンのうち 1.0.0 "
"が使われるべきであるとして解決します。"

#: ../../source/KLProgrammingGuide/globals.rst:1742
msgid ""
"The third approach uses an auxiliary json file which needs to provide a "
"mapping between the name of the extension and a version to use. The file "
"path of the json file needs to be specified in the "
":envvar:`FABRIC_EXT_VERFILE` environment variable. The content of the "
"file needs to look for example like this:"
msgstr ""
"３番めのアプローチは、エクステンション名と使用するバージョン間のマッピングを提供する、補助 json ファイルを利用する方法です。この "
"jsonファイルのパスは、環境変数 :envvar:`FABRIC_EXT_VERFILE` "
"で指定する必要があります。このファイルの内容は、以下のようにします:"

#: ../../source/KLProgrammingGuide/globals.rst:1751
msgid ""
"In the final approach users may set the :envvar:`FABRIC_EXT_OVERRIDE` "
"environment variable which can be used to specify sets of extensions that"
" should be loaded together. Each extension may define an override key "
"(see :ref:`EXTS_VERSIONING`) and if that key matches the value of "
":envvar:`FABRIC_EXT_OVERRIDE` then that extension will be loaded before "
"others with a different or missing override key. This may cause lower "
"version numbers of extensions to load. For example:"
msgstr ""
"４番め（最後）のアプローチは、 :envvar:`FABRIC_EXT_OVERRIDE` "
"環境変数を設定します。この変数は、「必ず一緒に読み込まれるエクステンションのセット」を指定するために使用します。各エクステンションにオーバーライドキーを定義(:ref:`EXTS_VERSIONING`"
" 参照)します。キーが :envvar:`FABRIC_EXT_OVERRIDE` "
"の値と一致すると、そのエクステンションが、他のエクステンション（あるいはオーバーライドキーがないもの）よりも先に読み込まれます。これにより、より低位のバージョンナンバーを持つエクステンションが読み込まれることになります。以下例:"

#: ../../source/KLProgrammingGuide/globals.rst:1757
msgid ""
"This will cause all extensions with an override key of \"MyOverride\" to "
"be preferred over other versions of the same extension with a different "
"override key."
msgstr ""
"オーバーライドキー \"MyOverride\" "
"を持つエクステンション全てを、異なるオーバーライドキーをもつ、同じエクステンションの異なるバージョンよりも優先する結果となります。"

#: ../../source/KLProgrammingGuide/globals.rst:1759
msgid "All environment variables need to use capital letters throughout."
msgstr "全ての環境変数はすべて大文字を使用します。"

#~ msgid ""
#~ msgstr ""

#~ msgid "struct A {"
#~ msgstr ""

#~ msgid "UInt32 a;"
#~ msgstr ""

#~ msgid "};"
#~ msgstr ""

#~ msgid "A(UInt32 x) {"
#~ msgstr ""

#~ msgid "this.a = x;"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "A.=(A a) {"
#~ msgstr ""

#~ msgid "report(\"Performing assignment\"); this.a = 2 * a.a;"
#~ msgstr ""

#~ msgid "operator entry() {"
#~ msgstr ""

#~ msgid "Direct assignment overloads are subject to the following restrictions:"
#~ msgstr "直接代入演算子のオーバロードは以下の制限に従います:"

#~ msgid ""
#~ "A a1(42), a2(56); report(\"Before: a1 ="
#~ " \" + a1 + \", a2 = \""
#~ " + a2); a1 = a2; report(\"After: "
#~ "a1 = \" + a1 + \", a2 "
#~ "= \" + a2);"
#~ msgstr ""

