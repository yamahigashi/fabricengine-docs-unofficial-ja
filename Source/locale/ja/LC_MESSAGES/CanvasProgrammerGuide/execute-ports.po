# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2016 Fabric Software Inc
# This file is distributed under the same license as the Fabric Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:4
msgid "Execute Ports"
msgstr "Execute ポート"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:6
msgid ""
"Execute ports are a special type of port used to control execution of the"
" graph.  For the most part execute ports and their connections appear "
"like regular ports and connections in Canvas, but their behavior is "
"somewhat different, as described below."
msgstr "Executeポートとは、一種の特別なポートです。グラフの実行制御に使用します。Executeポートとその接続の大部分は、Canvas中の他の通常のポートと接続と同じようにみえます。が、振る舞い方は若干異なります。いかに述べていきましょう。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:8
msgid ""
"An execute port is a port whose type is the built-in type `Execute`.  The"
" type `Execute` is an empty type and carries no data; however, the core "
"of Fabric Engine looks for ports of type `Execute` and uses them to "
"control how Canvas graphs are executed."
msgstr ""
"Executeポートとは、ポート型が組み込み型である Execute型 "
"であるポートです。『Execute型』とは、空の型でありデータを運ぶものではありません。しかし、Fabric "
"Engineのコアはこの『Execute型』のポートを見つけると、Canvasグラフをどのように実行するかの制御にこのポートを使用します。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:11
msgid "The Implicit Execute Port"
msgstr "暗黙の Executeポート"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:13
msgid ""
"Every instance node automatically has a port of type `Execute` called "
"`exec`.  This is referred to as the :dfn:`implicit execute port`.  The "
"implicit execute port does not appear alongside regular ports on nodes "
"but rather is accessible through the node header:"
msgstr ""
"全てのインスタンスノードは自動的に『exec』と言う名の『Execute型の』ポートを持ちます。これを :dfn:`暗黙の "
"Executeポート（implicit execute port）` "
"と呼びます。暗黙のexecuteポートは、通常のポートとは別に表示され、ノードヘッダからアクセスできます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:17
msgid ""
"Once connected, the connection will also originate from or connect to the"
" node header:"
msgstr "一旦接続がなされると、接続線がノードヘッダから,あるいはノードヘッダへと伸びます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:21
msgid ""
"The implicit execute port is automatically \"pulled\" by a node before "
"the node is executed.  This allows Canvas programmers to ensure that "
"other nodes that are connected to it will be executed before the node is "
"executed."
msgstr ""
"暗黙のexecuteポートは、そのノードが実行される前に、ノードによって自動的に『引かれ（pulled）』ます。これにより "
"Canvasプログラマが、そのノードへと接続されている他のノードが、そのノード実行前に確実に実行されることを保証できます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:26
msgid "Explicit Execute Ports"
msgstr "明示的な Executeポート"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:28
msgid ""
"In addition to the implicit execute port, you can add explicit execute "
"ports to a node by simply adding ports of type `Execute`:"
msgstr "暗黙のexecuteポートに加え、明示的なexecuteポートをノードに加える事もできます。単純に `Execute` 型のポートを追加しましょう。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:32
msgid ""
"In the above example, which is a Canvas function that implements a for "
"loop, the `body` port has type `Execute`."
msgstr "forループを実装したCanvas関数の上の例では、 `body` ポートが `Execute` 型を持ちます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:34
msgid ""
"In order to cause an implicit execute port to be executed, you simply "
"wrap the name of of the port in the `dfgExecute(...)` construct as shown "
"above."
msgstr ""
"暗黙のexecuteポートが実行されるようにするには、上の例のように `dfgExecute(...)` "
"コンストラクタの中でポート名を単純にラップします。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:38
msgid ""
"Note that the `dfgExecute(...)` construct is optional; simply inserting "
"the name of the implicit execute port as an expression will cause it to "
"be executed.  The purpose of this is to allow certain polymorphic nodes "
"such as `Fabric.Core.Control.If` to operate equally well when their ports"
" have execute and non-execute types."
msgstr ""
"`dfgExecute(...)` "
"コンストラクタを作るかどうかは任意です。暗黙のexecuteポートの名前を単純に、式として挿入すると、それが実行されます。この挙動の目的は、特定の多態ノード（例えば"
" `Fabric.Core.Control.If` ）において、ノードのポートが "
"execute型であったりなかったりしても、操作がどちらも同様にうまくいくようにするためです。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:41
msgid "Connections To and From Execute Ports"
msgstr "Executeポートへの接続、Expertsポートからの接続"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:43
msgid ""
"In addition to connections between ports that both have type `Execute`, "
"it is possible to connect from a port that has a type other than "
"`Execute` to a port of type `Execute`:"
msgstr ""
"『Execute型』どうしのポートの接続にくわえ、 `Execute` 以外の型ポートから `Execute` "
"型のポートへと接続を張ることができます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:47
msgid ""
"Such a connection simply pulls the port in question and discards the "
"result."
msgstr "このような接続は、該当ポートを単純に引いてくるものの、結果は破棄します。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:50
msgid "Multiple Connections to Execute Ports"
msgstr "Executeポートへの複数の接続"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:52
msgid ""
"Unlike regular ports, it is possible to have multiple connections to a "
"single execute port:"
msgstr "通常のポートとは違い、一つの Executeポートに対し、複数の接続をすることが可能です:"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:56
msgid ""
"In the case of multiple connections, the order in which Canvas \"pulls\" "
"the connected ports is not guaranteed; this is to enable (eventually) "
"parallel evaluation of multiple branches.  If you wish to guarantee "
"sequential evaluation, use one of the Execute.Merge presets."
msgstr ""
"複数の接続を貼る場合、Canvasが『引いて』くる接続ポートの順序は保証されません。これは最終的には、複数の枝の並列実行を可能にするためです。直列実行を保証したい場合には、"
" `Execute.Merge` プリセットを使用します。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:60
msgid ""
"It is not currently possible in the Canvas interface to see the order of "
"the connections; therefore it is recommended to lay out the nodes "
"manually in the order of the connections so that it is obvious for "
"someone reading the graph.  This will be fixed in a future version of "
"Fabric."
msgstr ""
"現状の "
"Canvasインタフェースでは、接続の順序を確認することができません。したがって、ノードの配置レイアウトを手動で接続順序と合わせることで、グラフを読むことになる人物にとって明らかになるようにしておくことをおすすめいたします。将来の"
" Fabric のバージョンで修正予定です。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:63
msgid "Multiple Executions of Execute Ports"
msgstr "Executeポートの複数の実行"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:65
msgid ""
"Unlike regular ports, if an implicit execute port is \"pulled\" multiple "
"times, then it will be evaluated multiple times.  This allows you to "
"create looping-type constructs using execute ports."
msgstr ""
"通常のポートと違い、暗黙のexecuteポートが複数回『引かれる』場合、実際に複数回分、評価がまわります。これによりユーザ独自の ループ型 を "
"executeポートを使用し作成することができます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:67
msgid ""
"Furthermore, whenever an execute port is pulled it will re-evaluate all "
"the (execute and non-execute) ports behind the execute port.  In "
"contrast, when a regular port is pulled it will only evaluate the ports "
"behind it if they haven't already been evaluated."
msgstr ""
"さらに、executeポートが引かれる際はいつでも、そのexecuteの上流の全てのポート（execute, "
"非execute)が再評価されます。対照的に、通常のポートが引かれる場合は、評価済でない場合のみ、上流ポートの評価がなされます。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:69
msgid ""
"It is possible to ensure that (execute and non-execute) ports are only "
"pulled a single time by using a explicit `Cache` node.  Simply put the "
"cache node in front of the nodes that you only want to have evaluated a "
"single time."
msgstr ""
"明示的な `Cache` ノードを使うことで、(execute と 非execute) "
"ポートが一度のみ引かれるようにすることが可能です。Cacheノードを、一度のみ評価を行いたいノードの手前に単純に配置します。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:71
msgid ""
"All of this is illustrated in the ForLoop.canvas example that ships with "
"Fabric, located at "
":file:`$FABRIC_DIR/Samples/Canvas/ExecutePorts/ForLoop.canvas`.  In this "
"example we use execute ports to execute a collection of nodes as the body"
" of a loop, using a Canvas variable to track the iteration of the loop."
msgstr ""
"Fabric 付属のサンプル ForLoop.canvas （  "
":file:`$FABRIC_DIR/Samples/Canvas/ExecutePorts/ForLoop.canvas`  "
"）で以上のことを実践しています。この用例では、executeポートを使いノード一式をループのボディとして実行し、Canvas変数をループ回数の追跡に用いています。"

#: ../../source/CanvasProgrammerGuide/execute-ports.rst:75
msgid ""
"This example is meant to serve primarily as an example of how execute "
"ports work; For a more natural way of looping over groups of nodes please"
" refer to :ref:`the blocks section of the Canvas Programming Guide "
"<canvas-programming-guide-blocks>`"
msgstr ""

#~ msgid ""
#~ "This example is meant to serve "
#~ "primarily as an example of how "
#~ "execute ports work; a future version "
#~ "of Fabric will introduce a feature "
#~ "called \"blocks\" that will provide a"
#~ " more natural way of looping over "
#~ "groups of nodes."
#~ msgstr ""
#~ "この用例では一義的には executeポートがどのように動作するかを示すものです; "
#~ "将来のFabricのバージョンでは  \"blocks\" "
#~ "と呼ぶ機能を導入し、より自然なやり方で、ノードグループをループさせる事ができるようになります。"

