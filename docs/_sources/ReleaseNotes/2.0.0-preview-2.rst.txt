.. _RELNOTES-2.0.0-preview-2:

Fabric Engine 2.0.0-preview-2 Release Notes
=================================================

.. image:: /images/FE_logo_345_60.*
   :width: 345px
   :height: 60px

| Fabric Engine version 2.0.0-preview-2
| Released Friday 6 March 2015
| Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.

Introduction
--------------------------------

This is a private preview release that is meant to provide further demos of Core and UI tecnologies that will be an integral part of the 2.0.0 release..

.. warning::
  
  This is not a general-purpose Fabric Engine release; it is meant only for previewing the DFG.
  There has not been extensive testing of this release and there are known issues that affect stability.

Installation
-------------------------------------

This released is "installed" the same as any other, namedly by unpacking the archive and then running :file:`source environment.sh` or :file:`prompt.bat`.  Please refer to the :ref:`InstallationGuide` for more general installation instructions.

Running the DFG Demos
-------------------------------------

We recommend first looking at Helge's demo content first to understand what to expect.  There are lots of tips and tricks in these videos that we've probably forgotten to mention here.

One of the main highlights of this release is the inclusion of Maya support for the DFG.  If you load the Splice plugin in Maya you now see that the first time in the Fabric menu is "Create DFG Node"; the older commands are now marked as "legacy".

You should start by looking at the Maya DFG samples, located in the :file:`$FABRIC_DIR/Samples/SpliceMaya/DFG`.  As with legacy splice you need only select the Maya object containing a DFG graph, select the dfgMayaNode object in the Attribute Editor, and then click "Open DFG Editor".

We continue to ship the:file:`dfgTest` application provided with 2.0.0-preview-1 but since it does not provide a viewport for rendering it is a lot less interesting.  There are samples for :file:`dfgTest` located below :file:`$FABRIC_DIR/Samples/DFG`.

Major Changes in 2.0.0-preview 2
---------------------------------

If you are not at all familiar with the Fabric DFG please review to :ref:`RELNOTES-2.0.0-preview-1` first to make sure you have a basic undestanding of what the DFG is.

There are many important changes to the DFG in this release:

- Support for DFG nodes in Maya

- We now ship with a much larger preset library thanks to the inclusion of the :file:`kl2dfg` utility.  Most Fabric extensions now expose their functionality through DFG nodes.  This allows you to use the DFG for very sophisticated use cases inside of Maya.  See the kl2DFG section below for more details on this important utility.

- The DFG now has the ability to do simple caching of output values.  If you right-click a node you will see options for the node caching behaviour.  Note that there are several issues with caching that will be resolved in the next release; caching works for simple cases but if you use it for more complex cases you may encounter issues.

- You can now edit the values assigned to detached node pins; just double-click the node to see the value editors.

- We now ship with lots of new samples for both Maya DFG and dfgTest.

- We should now correctly identify line numbers for errors in DFG functions.  But you probably won't be so interested in writing KL functions now that you have all those presets!

There are a few other changes that are not DFG specific:

- We now use Intel TBB rather than our custom threadpool to handle parallel procesing.  In practice this does not appear to make any difference for performance on its own but may provide better performance using Fabric inside applications (such as Maya) that are also using TBB.

- We have reduced the cached load time of extensions.

2.0.0-preview-2 is up-to-date with version 1.15.0, ie. it contains all functionality that is in 1.15.0.

Tips and Tricks
--------------------------------

- The left pane of the DFG editor window can be opened up to show the tree hierarcy of all the DFG presets.  These presets can be dragged into the editor.

- Inside a DFG editor window press the Tab key to open up a quick search widget.  Simply start typing and you will see the top matching nodes; press enter or click on the node and it will be instanced in the DFG.

- You can now zoom in and out in the DFG editor using the mouse scroll wheel.

kl2DFG
-----------------------------

You can use the kl2DFG utility to generate DFG presets from Fabric extensions.  Run :file:`kl2DFG --help` to see how to use it.

kl2DFG will automatically generate presets from types, functions and methods in an extension.  You are able to control some aspects of how the DFG presets are generated using metadata in the documentation comments for the methods and functions; search for "dfg" in the extensions that search with Fabric for examples.

Note that you will have to add the directory containing the resulting DFG preset files to the FABRIC_DFG_PATH environment variable in order for Fabric to find them.

kl2DFG is not currently documented; documentation will come in a later release.

Known Problems
-------------------------------

This is an early preview of technology we will be rolling out over the coming months.  A non-comprehensive list of things that are currently missing and that are in the works are:

- We believe DFG is reasonably robust but we know that it will not currently scale well to extremely large graphs; in particular, graph compilation will probably start to slow down in the presence of hundreds of nodes.  This will be addressed in the future.

- Compile errors in KL functions can be tricky to track down because they do not show the file ane line number correctly.  This will be fixed in a future version.

- Undo/redo is somewhat flakey.  It works at the Core level but has a few quirks at the UI level.  Undo/redo is a first-class feature of the system and it will be fully supported at release time.

- We do not yet support loops or PEX calls within graphs; of course, these can be encoded into DFG functions.

- There are problems with caching; caching was a last-minute addition to this release and will be overhauled in the next release.

- We do not yet support hierarchical ports; this is a feature that we will eventually support.  We also do not support the automatic exposure of structure members on output ports, which we hope to eventually support as well.

- dfgTest: On OS X there is a weird save file dialog box bug in Qt which munges the same of files that are saved with the .dfg.json suffix.  We will hunt for a workaround in a future version..
