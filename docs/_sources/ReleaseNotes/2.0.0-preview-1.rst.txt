.. _RELNOTES-2.0.0-preview-2:

Fabric Engine 2.0.0-preview-1 Release Notes
=================================================

.. image:: /images/FE_logo_345_60.*
   :width: 345px
   :height: 60px

| Fabric Engine version 2.0.0-preview-1
| Released Thursday 18 December 2014
| Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.

Introduction
--------------------------------

This is a private preview release that is meant to provide a simple demo of some of the DFG core and UI technology we are workign on for 2.0.

.. warning::
  
  This is not a general-purpose Fabric Engine release; it is meant only for previewing the DFG.  In particular, Splice has been removed since there is no testing for it that has been done and it is not part of this preview.  You should continue to use the normal Fabric Engine releases for normal Fabric work.

Installation
-------------------------------------

This released is "installed" the same as any other, namedly by unpacking the archive and then running :file:`source environment.sh` or :file:`prompt.bat`.  Please refer to the :ref:`InstallationGuide` for more general installation instructions.

Running the DFG Demos
-------------------------------------

The DFG preview is encapsulated into the :file:`dfgTest` (or :file:`dfgTest.exe`) application, which should be on your PATH after setting up the Fabric shell.  You can run it on its own or you can pass it the name of a scene to open (one that was saved from the File > Save scene menu command).

We recommend looking at Helge's demo video first to understand the basics of how to use dfgTest.  It should seem reasonably familiar to users of other node graph-editing environments.

Sample Scenes
-------------------------------

The sample scenes are located in $FABRIC_DIR/Samples/DFG.  You can open them directly in dfgTest using File > Load.  Scenes are encoded in JSON and we welcome you to look at them in a text editor to see what is going on.

You can save your current scene with the File > Save menu item.

Presets
---------------------------

The DFG presets are in $FABRIC_DIR/Presets/DFG.  Again, they are just JSON -- in fact, a preset is the same as a scene with no "arguments" bound to the root-level graph or function (see :ref:`DFGPG` for more details on the DFG core architecture).

You can export a preset from a node in a graph by right-clicking and picking "Save Preset".  It will prompt for a filename, and the preset will also appear in the presets window at the root level.

If you have a directory of presets you would like to have loaded just add it to the FABRIC_DFG_PATH environment variable.

Presets in the DFG can be either graphs or functions (see below).  We have provided the Fabric.Geometry.ReportDescription preset as an example of a graph preset.  Try instancing it into a graph and then right-click -> Edit.

Central to the operation of the DFG is the notion of instancing.  Nodes in graphs are instances of other graphs or functions, which may be presets or subgraphs.  If you edit the node then every instance of the node will see the edit.  In the long term we will be proving workflow to manage restrictions on editing of shared graphs and functions such as presets.

DFG Functions
-------------------------

A DFG function is a bit of KL code that has been bound to a bunch of ports.  The code uses a special syntax for the ports and function declarations.  To get an idea of how this works, simple instance a preset into a graph (drag and drop from the presets palette) and then right-click -> Edit.  A window will open with the KL code.

Polymorphism in the DFG
------------------------------

The DFG is a fully polymorphic node graph system.  Types are grouped on DFG functions using the $TYPE..$ syntax; see the presets for details.  Graphs are polymorphic because they transfers 

Limitations
-------------------------------

This is an early preview of technology we will be rolling out over the coming months.  A non-comprehensive list of things that are currently missing and that are in the works are:

- We believe dfgTest is reasonably robust but we know that it will not scale well to extremely large graphs; in particular, graph compilation will probably start to slow down in the presence of hundreds of nodes.  Scalability is a first-class target for release so this will be addressed in future previews.

- Currently dfgTest is compute-only.  We plan to add a rendering viewport using InlineDrawing fairly soon, later changing it to use RTR2.

- We are currently shipping with a reasonably restricted set of presets.  There are basic math operations and some Geometry nodes.  A common use case we've tested is instancing some geometry nodes, connecting them up to a deform, and then connecting the result up to a Fabric.Geometry.ReportDescription node.

- Compile errors in KL functions can be tricky to track down because they do not show the file ane line number correctly.  This will be fixed in a future version.

- Undo/redo is somewhat flakey.  It works at the Core level but has a few quirks at the UI level.  Undo/redo is a first-class feature of the system and it will be fully supported at release time.

- You cannot currently edit the values bound to unconnected import ports. For instance, a Fabric.Math.Add node with an unconnected "rhs" port will just add 0, and there is no way to control this from the UI.

- We do not yet support loops or PEX calls within graphs; of course, these can be encoded into DFG functions.

- We do not yet support hierarchical ports; this is a feature that we will eventually support.  We also do not support the automatic exposure of structure members on output ports, which we hope to eventually support as well.

- On OS X there is a weird save file dialog box bug in Qt which munges the same of files that are saved with the .dfg.json suffix.  We will hunt for a workaround in a future version..
