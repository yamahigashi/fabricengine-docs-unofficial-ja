#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-23 12:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/DebuggingGuide/introduction.rst:2
msgid "Introduction"
msgstr "はじめに"

#: ../../source/DebuggingGuide/introduction.rst:4
#, fuzzy
msgid ""
"|FABRIC_PRODUCT_NAME| provides functionality to aid in debugging "
"applications written using |FABRIC_PRODUCT_NAME| and KL. The Fabric "
"Engine debugger (called zBug and pronounced zee-bug) is based on `LLDB "
"<http://lldb.llvm.org/>`_ and as such aims to provide all of the "
"functionality found in existing debugging software such as the Visual "
"Studio debugger or gdb while adding support for debugging KL code. With "
"zBug a user should be able to debug the full spectrum of code involved in"
" a KL application, including debugging C/C++ extensions. Because of the "
"support provided by LLDB zBug can also be used to debug pure C or C++ "
"applications or extensions using the same UI."
msgstr ""
"|FABRIC_PRODUCT_NAME| は |FABRIC_PRODUCT_NAME| と "
"KLを使って記述されたアプリケーションのデバッグを支援する機能を提供しています。Fabric Engine デバッガー (zBugと呼びます, "
"ジーバグ/zee-bugと発音) は、 `LLDB <http://lldb.llvm.org/>`_ に基づき、既存のデバッグソフトウェア "
"―Visual Studio デバッガや、gdb ― と同等の機能の提供を目指し、KLコードのデバッグのサポートを追加します。zBug "
"によって、ユーザは KLアプリケーションに関するコードを多用な角度 ―C/C++エクステンションを含む― "
"からデバッグすることができます。LLDBにより提供されるサポートによって、同一のUIによりピュアC,C++アプリケーションからエクステンションまでを、zBugでデバッグすることができます。"

#: ../../source/DebuggingGuide/introduction.rst:7
msgid "How Debugging Works"
msgstr "デバッグ方法"

#: ../../source/DebuggingGuide/introduction.rst:9
msgid ""
"In broad strokes debugging a KL application is no different than "
"debugging a compiled C or C++ application. In both cases the compiled "
"code will have some information included in it to pass information to the"
" debugger about file names, line numbers, variable names, types, and "
"other information. The most common open format for this debug info is "
"Dwarf, this is the format used by most open compilers (with Microsoft's "
"Visual Studio compiler being the big exception) and this is the debug "
"info format used by KL as well."
msgstr ""
"おおまかに言えば、KLアプリケーションのデバッグも、コンパイル済C/C++アプリケーションのデバッグに大きな違いはありません。どちらもコンパイルされたコードに、デバッガへ渡すいくつかの情報を内包させることになります。ファイル名、行番号、変数名、型、あるいはそのほかの情報です。デバッグ情報のための最も一般的なフォーマットは"
" <Dwarf> です。このフォーマットは多くのオープンなコンパイラ（Microsoft の Visual Studio "
"のコンパイラは一番大きい例外）に使用されています。KLでも同様にこのデバッグ情報フォーマットを使用します。"

#: ../../source/DebuggingGuide/introduction.rst:11
msgid ""
"When getting ready to debug a typical C++ application, a developer will "
"usually tell the compiler to include this debug info in the resulting "
"output. Debug info isn't included by default in all compiled code because"
" it takes additional time to produce and requires additional memory when "
"running the application."
msgstr ""
"典型的な C++ "
"アプリケーションをデバッグする準備が整ったら、開発者は通常、出力成果物の中にこのデバッグ情報を含めるかどうか、コンパイラに指示します。コンパイルされたコードには、ディフォルトでデバッグ情報は内包されません。コンパイルに余分な時間をとるうえ、アプリケーション実行時に余分なメモリを消費するためです。"

#: ../../source/DebuggingGuide/introduction.rst:13
msgid ""
"A developer will also normally tell the compiler to avoid running "
"optimization passes on the resulting code. Optimizing compiled code can "
"result in much faster execution times, however as the optimizer may "
"change the code significantly in order to achieve this it can make it "
"harder to debug as line numbers may change and variables that the "
"developer wrote into the code may be optimized away and replaced."
msgstr "開発者は通常、コンパイラが出力コードに対する最適化を行わないよう指示します。コンパイルコードに対する最適化は、実行時の高速化に寄与しますが、最適化処理によりコードが大幅に変更され、デバッグが難しくなります。行番号が変更され、コードに記述した変数が置き換わり、どこかへいってしまったりするのです。"

#: ../../source/DebuggingGuide/introduction.rst:15
msgid ""
"Both of these ideas also hold true when debugging KL code. While a "
"developer can independently choose whether or not to run optimization on "
"their KL code and also whether or not to include debug info, in the "
"general case for debugging you will want to include debug info and "
"disable optimizations. Once your code has been written, debugged, and "
"determined to work correctly though you will usually want to disable "
"debug info output to save on memory and enable optimizations to allow the"
" KL compiler to change your code as necessary in order to make it as fast"
" as possible."
msgstr ""
"KLコードをデバッグする際も、このアイデア両方当てはまります。開発者はそれぞれ独立して選択 ―自身のコードに対する最適化を施すかどうか; "
"デバッグ情報を埋め込むかどうか― することができます。デバッグにおいて一般的には <デバッグ情報を内包し、最適化は行わない> "
"という選択になります。コードを記述し、デバッグし、正常に動作するかどうか見定め、ようやくその後、デバッグ情報を無効にしてメモリを節約し、最適化を有効にしKLコンパイラが必要に応じ可能な限り高速動作するようコードを変更させます。"

